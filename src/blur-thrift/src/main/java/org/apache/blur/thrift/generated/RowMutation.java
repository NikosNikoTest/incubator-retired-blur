/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.blur.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 */
public class RowMutation implements org.apache.thrift.TBase<RowMutation, RowMutation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RowMutation");

  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rowId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WAL_FIELD_DESC = new org.apache.thrift.protocol.TField("wal", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ROW_MUTATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rowMutationType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RECORD_MUTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("recordMutations", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField WAIT_TO_BE_VISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("waitToBeVisible", org.apache.thrift.protocol.TType.BOOL, (short)6);

  /**
   * The that that the row mutation is to act upon.
   */
  public String table; // required
  /**
   * The row id that the row mutation is to act upon.
   */
  public String rowId; // required
  /**
   * Write ahead log, by default all updates are written to a write ahead log before the update is applied.  That way if a failure occurs before the index is committed the WAL can be replayed to recover any data that could have been lost.
   */
  public boolean wal; // required
  /**
   * 
   * @see RowMutationType
   */
  public RowMutationType rowMutationType; // required
  public List<RecordMutation> recordMutations; // required
  /**
   * On mutate waits for the mutation to be visible to queries and fetch requests.
   */
  public boolean waitToBeVisible; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The that that the row mutation is to act upon.
     */
    TABLE((short)1, "table"),
    /**
     * The row id that the row mutation is to act upon.
     */
    ROW_ID((short)2, "rowId"),
    /**
     * Write ahead log, by default all updates are written to a write ahead log before the update is applied.  That way if a failure occurs before the index is committed the WAL can be replayed to recover any data that could have been lost.
     */
    WAL((short)3, "wal"),
    /**
     * 
     * @see RowMutationType
     */
    ROW_MUTATION_TYPE((short)4, "rowMutationType"),
    RECORD_MUTATIONS((short)5, "recordMutations"),
    /**
     * On mutate waits for the mutation to be visible to queries and fetch requests.
     */
    WAIT_TO_BE_VISIBLE((short)6, "waitToBeVisible");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE
          return TABLE;
        case 2: // ROW_ID
          return ROW_ID;
        case 3: // WAL
          return WAL;
        case 4: // ROW_MUTATION_TYPE
          return ROW_MUTATION_TYPE;
        case 5: // RECORD_MUTATIONS
          return RECORD_MUTATIONS;
        case 6: // WAIT_TO_BE_VISIBLE
          return WAIT_TO_BE_VISIBLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WAL_ISSET_ID = 0;
  private static final int __WAITTOBEVISIBLE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_ID, new org.apache.thrift.meta_data.FieldMetaData("rowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAL, new org.apache.thrift.meta_data.FieldMetaData("wal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROW_MUTATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rowMutationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RowMutationType.class)));
    tmpMap.put(_Fields.RECORD_MUTATIONS, new org.apache.thrift.meta_data.FieldMetaData("recordMutations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordMutation.class))));
    tmpMap.put(_Fields.WAIT_TO_BE_VISIBLE, new org.apache.thrift.meta_data.FieldMetaData("waitToBeVisible", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RowMutation.class, metaDataMap);
  }

  public RowMutation() {
    this.wal = true;

    this.waitToBeVisible = false;

  }

  public RowMutation(
    String table,
    String rowId,
    boolean wal,
    RowMutationType rowMutationType,
    List<RecordMutation> recordMutations,
    boolean waitToBeVisible)
  {
    this();
    this.table = table;
    this.rowId = rowId;
    this.wal = wal;
    setWalIsSet(true);
    this.rowMutationType = rowMutationType;
    this.recordMutations = recordMutations;
    this.waitToBeVisible = waitToBeVisible;
    setWaitToBeVisibleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RowMutation(RowMutation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetRowId()) {
      this.rowId = other.rowId;
    }
    this.wal = other.wal;
    if (other.isSetRowMutationType()) {
      this.rowMutationType = other.rowMutationType;
    }
    if (other.isSetRecordMutations()) {
      List<RecordMutation> __this__recordMutations = new ArrayList<RecordMutation>();
      for (RecordMutation other_element : other.recordMutations) {
        __this__recordMutations.add(new RecordMutation(other_element));
      }
      this.recordMutations = __this__recordMutations;
    }
    this.waitToBeVisible = other.waitToBeVisible;
  }

  public RowMutation deepCopy() {
    return new RowMutation(this);
  }

  @Override
  public void clear() {
    this.table = null;
    this.rowId = null;
    this.wal = true;

    this.rowMutationType = null;
    this.recordMutations = null;
    this.waitToBeVisible = false;

  }

  /**
   * The that that the row mutation is to act upon.
   */
  public String getTable() {
    return this.table;
  }

  /**
   * The that that the row mutation is to act upon.
   */
  public RowMutation setTable(String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  /**
   * The row id that the row mutation is to act upon.
   */
  public String getRowId() {
    return this.rowId;
  }

  /**
   * The row id that the row mutation is to act upon.
   */
  public RowMutation setRowId(String rowId) {
    this.rowId = rowId;
    return this;
  }

  public void unsetRowId() {
    this.rowId = null;
  }

  /** Returns true if field rowId is set (has been assigned a value) and false otherwise */
  public boolean isSetRowId() {
    return this.rowId != null;
  }

  public void setRowIdIsSet(boolean value) {
    if (!value) {
      this.rowId = null;
    }
  }

  /**
   * Write ahead log, by default all updates are written to a write ahead log before the update is applied.  That way if a failure occurs before the index is committed the WAL can be replayed to recover any data that could have been lost.
   */
  public boolean isWal() {
    return this.wal;
  }

  /**
   * Write ahead log, by default all updates are written to a write ahead log before the update is applied.  That way if a failure occurs before the index is committed the WAL can be replayed to recover any data that could have been lost.
   */
  public RowMutation setWal(boolean wal) {
    this.wal = wal;
    setWalIsSet(true);
    return this;
  }

  public void unsetWal() {
    __isset_bit_vector.clear(__WAL_ISSET_ID);
  }

  /** Returns true if field wal is set (has been assigned a value) and false otherwise */
  public boolean isSetWal() {
    return __isset_bit_vector.get(__WAL_ISSET_ID);
  }

  public void setWalIsSet(boolean value) {
    __isset_bit_vector.set(__WAL_ISSET_ID, value);
  }

  /**
   * 
   * @see RowMutationType
   */
  public RowMutationType getRowMutationType() {
    return this.rowMutationType;
  }

  /**
   * 
   * @see RowMutationType
   */
  public RowMutation setRowMutationType(RowMutationType rowMutationType) {
    this.rowMutationType = rowMutationType;
    return this;
  }

  public void unsetRowMutationType() {
    this.rowMutationType = null;
  }

  /** Returns true if field rowMutationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRowMutationType() {
    return this.rowMutationType != null;
  }

  public void setRowMutationTypeIsSet(boolean value) {
    if (!value) {
      this.rowMutationType = null;
    }
  }

  public int getRecordMutationsSize() {
    return (this.recordMutations == null) ? 0 : this.recordMutations.size();
  }

  public java.util.Iterator<RecordMutation> getRecordMutationsIterator() {
    return (this.recordMutations == null) ? null : this.recordMutations.iterator();
  }

  public void addToRecordMutations(RecordMutation elem) {
    if (this.recordMutations == null) {
      this.recordMutations = new ArrayList<RecordMutation>();
    }
    this.recordMutations.add(elem);
  }

  public List<RecordMutation> getRecordMutations() {
    return this.recordMutations;
  }

  public RowMutation setRecordMutations(List<RecordMutation> recordMutations) {
    this.recordMutations = recordMutations;
    return this;
  }

  public void unsetRecordMutations() {
    this.recordMutations = null;
  }

  /** Returns true if field recordMutations is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordMutations() {
    return this.recordMutations != null;
  }

  public void setRecordMutationsIsSet(boolean value) {
    if (!value) {
      this.recordMutations = null;
    }
  }

  /**
   * On mutate waits for the mutation to be visible to queries and fetch requests.
   */
  public boolean isWaitToBeVisible() {
    return this.waitToBeVisible;
  }

  /**
   * On mutate waits for the mutation to be visible to queries and fetch requests.
   */
  public RowMutation setWaitToBeVisible(boolean waitToBeVisible) {
    this.waitToBeVisible = waitToBeVisible;
    setWaitToBeVisibleIsSet(true);
    return this;
  }

  public void unsetWaitToBeVisible() {
    __isset_bit_vector.clear(__WAITTOBEVISIBLE_ISSET_ID);
  }

  /** Returns true if field waitToBeVisible is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitToBeVisible() {
    return __isset_bit_vector.get(__WAITTOBEVISIBLE_ISSET_ID);
  }

  public void setWaitToBeVisibleIsSet(boolean value) {
    __isset_bit_vector.set(__WAITTOBEVISIBLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((String)value);
      }
      break;

    case ROW_ID:
      if (value == null) {
        unsetRowId();
      } else {
        setRowId((String)value);
      }
      break;

    case WAL:
      if (value == null) {
        unsetWal();
      } else {
        setWal((Boolean)value);
      }
      break;

    case ROW_MUTATION_TYPE:
      if (value == null) {
        unsetRowMutationType();
      } else {
        setRowMutationType((RowMutationType)value);
      }
      break;

    case RECORD_MUTATIONS:
      if (value == null) {
        unsetRecordMutations();
      } else {
        setRecordMutations((List<RecordMutation>)value);
      }
      break;

    case WAIT_TO_BE_VISIBLE:
      if (value == null) {
        unsetWaitToBeVisible();
      } else {
        setWaitToBeVisible((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE:
      return getTable();

    case ROW_ID:
      return getRowId();

    case WAL:
      return Boolean.valueOf(isWal());

    case ROW_MUTATION_TYPE:
      return getRowMutationType();

    case RECORD_MUTATIONS:
      return getRecordMutations();

    case WAIT_TO_BE_VISIBLE:
      return Boolean.valueOf(isWaitToBeVisible());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE:
      return isSetTable();
    case ROW_ID:
      return isSetRowId();
    case WAL:
      return isSetWal();
    case ROW_MUTATION_TYPE:
      return isSetRowMutationType();
    case RECORD_MUTATIONS:
      return isSetRecordMutations();
    case WAIT_TO_BE_VISIBLE:
      return isSetWaitToBeVisible();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RowMutation)
      return this.equals((RowMutation)that);
    return false;
  }

  public boolean equals(RowMutation that) {
    if (that == null)
      return false;

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_rowId = true && this.isSetRowId();
    boolean that_present_rowId = true && that.isSetRowId();
    if (this_present_rowId || that_present_rowId) {
      if (!(this_present_rowId && that_present_rowId))
        return false;
      if (!this.rowId.equals(that.rowId))
        return false;
    }

    boolean this_present_wal = true;
    boolean that_present_wal = true;
    if (this_present_wal || that_present_wal) {
      if (!(this_present_wal && that_present_wal))
        return false;
      if (this.wal != that.wal)
        return false;
    }

    boolean this_present_rowMutationType = true && this.isSetRowMutationType();
    boolean that_present_rowMutationType = true && that.isSetRowMutationType();
    if (this_present_rowMutationType || that_present_rowMutationType) {
      if (!(this_present_rowMutationType && that_present_rowMutationType))
        return false;
      if (!this.rowMutationType.equals(that.rowMutationType))
        return false;
    }

    boolean this_present_recordMutations = true && this.isSetRecordMutations();
    boolean that_present_recordMutations = true && that.isSetRecordMutations();
    if (this_present_recordMutations || that_present_recordMutations) {
      if (!(this_present_recordMutations && that_present_recordMutations))
        return false;
      if (!this.recordMutations.equals(that.recordMutations))
        return false;
    }

    boolean this_present_waitToBeVisible = true;
    boolean that_present_waitToBeVisible = true;
    if (this_present_waitToBeVisible || that_present_waitToBeVisible) {
      if (!(this_present_waitToBeVisible && that_present_waitToBeVisible))
        return false;
      if (this.waitToBeVisible != that.waitToBeVisible)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RowMutation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RowMutation typedOther = (RowMutation)other;

    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, typedOther.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowId()).compareTo(typedOther.isSetRowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowId, typedOther.rowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWal()).compareTo(typedOther.isSetWal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wal, typedOther.wal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowMutationType()).compareTo(typedOther.isSetRowMutationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowMutationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowMutationType, typedOther.rowMutationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordMutations()).compareTo(typedOther.isSetRecordMutations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordMutations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordMutations, typedOther.recordMutations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitToBeVisible()).compareTo(typedOther.isSetWaitToBeVisible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitToBeVisible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitToBeVisible, typedOther.waitToBeVisible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TABLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.table = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ROW_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.rowId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WAL
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.wal = iprot.readBool();
            setWalIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ROW_MUTATION_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.rowMutationType = RowMutationType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // RECORD_MUTATIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
              this.recordMutations = new ArrayList<RecordMutation>(_list42.size);
              for (int _i43 = 0; _i43 < _list42.size; ++_i43)
              {
                RecordMutation _elem44; // required
                _elem44 = new RecordMutation();
                _elem44.read(iprot);
                this.recordMutations.add(_elem44);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // WAIT_TO_BE_VISIBLE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.waitToBeVisible = iprot.readBool();
            setWaitToBeVisibleIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.table != null) {
      oprot.writeFieldBegin(TABLE_FIELD_DESC);
      oprot.writeString(this.table);
      oprot.writeFieldEnd();
    }
    if (this.rowId != null) {
      oprot.writeFieldBegin(ROW_ID_FIELD_DESC);
      oprot.writeString(this.rowId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WAL_FIELD_DESC);
    oprot.writeBool(this.wal);
    oprot.writeFieldEnd();
    if (this.rowMutationType != null) {
      oprot.writeFieldBegin(ROW_MUTATION_TYPE_FIELD_DESC);
      oprot.writeI32(this.rowMutationType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.recordMutations != null) {
      oprot.writeFieldBegin(RECORD_MUTATIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.recordMutations.size()));
        for (RecordMutation _iter45 : this.recordMutations)
        {
          _iter45.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WAIT_TO_BE_VISIBLE_FIELD_DESC);
    oprot.writeBool(this.waitToBeVisible);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RowMutation(");
    boolean first = true;

    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowId:");
    if (this.rowId == null) {
      sb.append("null");
    } else {
      sb.append(this.rowId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wal:");
    sb.append(this.wal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowMutationType:");
    if (this.rowMutationType == null) {
      sb.append("null");
    } else {
      sb.append(this.rowMutationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordMutations:");
    if (this.recordMutations == null) {
      sb.append("null");
    } else {
      sb.append(this.recordMutations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("waitToBeVisible:");
    sb.append(this.waitToBeVisible);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

