/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

/**
 * 
 */
public class RecordMutation implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<RecordMutation, RecordMutation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("RecordMutation");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField RECORD_MUTATION_TYPE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("recordMutationType", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField RECORD_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("record", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RecordMutationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RecordMutationTupleSchemeFactory());
  }

  /**
   * 
   * 
   * @see RecordMutationType
   */
  public RecordMutationType recordMutationType; // required
  /**
   * 
   */
  public Record record; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    /**
     * 
     * 
     * @see RecordMutationType
     */
    RECORD_MUTATION_TYPE((short)1, "recordMutationType"),
    /**
     * 
     */
    RECORD((short)2, "record");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECORD_MUTATION_TYPE
          return RECORD_MUTATION_TYPE;
        case 2: // RECORD
          return RECORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECORD_MUTATION_TYPE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("recordMutationType", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.EnumMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.ENUM, RecordMutationType.class)));
    tmpMap.put(_Fields.RECORD, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("record", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Record.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(RecordMutation.class, metaDataMap);
  }

  public RecordMutation() {
  }

  public RecordMutation(
    RecordMutationType recordMutationType,
    Record record)
  {
    this();
    this.recordMutationType = recordMutationType;
    this.record = record;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RecordMutation(RecordMutation other) {
    if (other.isSetRecordMutationType()) {
      this.recordMutationType = other.recordMutationType;
    }
    if (other.isSetRecord()) {
      this.record = new Record(other.record);
    }
  }

  public RecordMutation deepCopy() {
    return new RecordMutation(this);
  }

  @Override
  public void clear() {
    this.recordMutationType = null;
    this.record = null;
  }

  /**
   * 
   * 
   * @see RecordMutationType
   */
  public RecordMutationType getRecordMutationType() {
    return this.recordMutationType;
  }

  /**
   * 
   * 
   * @see RecordMutationType
   */
  public RecordMutation setRecordMutationType(RecordMutationType recordMutationType) {
    this.recordMutationType = recordMutationType;
    return this;
  }

  public void unsetRecordMutationType() {
    this.recordMutationType = null;
  }

  /** Returns true if field recordMutationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordMutationType() {
    return this.recordMutationType != null;
  }

  public void setRecordMutationTypeIsSet(boolean value) {
    if (!value) {
      this.recordMutationType = null;
    }
  }

  /**
   * 
   */
  public Record getRecord() {
    return this.record;
  }

  /**
   * 
   */
  public RecordMutation setRecord(Record record) {
    this.record = record;
    return this;
  }

  public void unsetRecord() {
    this.record = null;
  }

  /** Returns true if field record is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord() {
    return this.record != null;
  }

  public void setRecordIsSet(boolean value) {
    if (!value) {
      this.record = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECORD_MUTATION_TYPE:
      if (value == null) {
        unsetRecordMutationType();
      } else {
        setRecordMutationType((RecordMutationType)value);
      }
      break;

    case RECORD:
      if (value == null) {
        unsetRecord();
      } else {
        setRecord((Record)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECORD_MUTATION_TYPE:
      return getRecordMutationType();

    case RECORD:
      return getRecord();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECORD_MUTATION_TYPE:
      return isSetRecordMutationType();
    case RECORD:
      return isSetRecord();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RecordMutation)
      return this.equals((RecordMutation)that);
    return false;
  }

  public boolean equals(RecordMutation that) {
    if (that == null)
      return false;

    boolean this_present_recordMutationType = true && this.isSetRecordMutationType();
    boolean that_present_recordMutationType = true && that.isSetRecordMutationType();
    if (this_present_recordMutationType || that_present_recordMutationType) {
      if (!(this_present_recordMutationType && that_present_recordMutationType))
        return false;
      if (!this.recordMutationType.equals(that.recordMutationType))
        return false;
    }

    boolean this_present_record = true && this.isSetRecord();
    boolean that_present_record = true && that.isSetRecord();
    if (this_present_record || that_present_record) {
      if (!(this_present_record && that_present_record))
        return false;
      if (!this.record.equals(that.record))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RecordMutation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RecordMutation typedOther = (RecordMutation)other;

    lastComparison = Boolean.valueOf(isSetRecordMutationType()).compareTo(typedOther.isSetRecordMutationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordMutationType()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.recordMutationType, typedOther.recordMutationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecord()).compareTo(typedOther.isSetRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.record, typedOther.record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RecordMutation(");
    boolean first = true;

    sb.append("recordMutationType:");
    if (this.recordMutationType == null) {
      sb.append("null");
    } else {
      sb.append(this.recordMutationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("record:");
    if (this.record == null) {
      sb.append("null");
    } else {
      sb.append(this.record);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
    if (record != null) {
      record.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RecordMutationStandardSchemeFactory implements SchemeFactory {
    public RecordMutationStandardScheme getScheme() {
      return new RecordMutationStandardScheme();
    }
  }

  private static class RecordMutationStandardScheme extends StandardScheme<RecordMutation> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, RecordMutation struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECORD_MUTATION_TYPE
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32) {
              struct.recordMutationType = RecordMutationType.findByValue(iprot.readI32());
              struct.setRecordMutationTypeIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECORD
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
              struct.record = new Record();
              struct.record.read(iprot);
              struct.setRecordIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, RecordMutation struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.recordMutationType != null) {
        oprot.writeFieldBegin(RECORD_MUTATION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.recordMutationType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.record != null) {
        oprot.writeFieldBegin(RECORD_FIELD_DESC);
        struct.record.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RecordMutationTupleSchemeFactory implements SchemeFactory {
    public RecordMutationTupleScheme getScheme() {
      return new RecordMutationTupleScheme();
    }
  }

  private static class RecordMutationTupleScheme extends TupleScheme<RecordMutation> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, RecordMutation struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRecordMutationType()) {
        optionals.set(0);
      }
      if (struct.isSetRecord()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRecordMutationType()) {
        oprot.writeI32(struct.recordMutationType.getValue());
      }
      if (struct.isSetRecord()) {
        struct.record.write(oprot);
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, RecordMutation struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.recordMutationType = RecordMutationType.findByValue(iprot.readI32());
        struct.setRecordMutationTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.record = new Record();
        struct.record.read(iprot);
        struct.setRecordIsSet(true);
      }
    }
  }

}

