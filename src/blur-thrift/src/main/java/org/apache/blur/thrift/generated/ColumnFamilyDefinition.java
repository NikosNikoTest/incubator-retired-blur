/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 */
public class ColumnFamilyDefinition implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<ColumnFamilyDefinition, ColumnFamilyDefinition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("ColumnFamilyDefinition");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField DEFAULT_DEFINITION_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("defaultDefinition", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField COLUMN_DEFINITIONS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("columnDefinitions", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnFamilyDefinitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnFamilyDefinitionTupleSchemeFactory());
  }

  /**
   * 
   */
  public ColumnDefinition defaultDefinition; // required
  /**
   * 
   */
  public Map<String,ColumnDefinition> columnDefinitions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    /**
     * 
     */
    DEFAULT_DEFINITION((short)1, "defaultDefinition"),
    /**
     * 
     */
    COLUMN_DEFINITIONS((short)2, "columnDefinitions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEFAULT_DEFINITION
          return DEFAULT_DEFINITION;
        case 2: // COLUMN_DEFINITIONS
          return COLUMN_DEFINITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEFAULT_DEFINITION, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("defaultDefinition", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, ColumnDefinition.class)));
    tmpMap.put(_Fields.COLUMN_DEFINITIONS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("columnDefinitions", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, ColumnDefinition.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(ColumnFamilyDefinition.class, metaDataMap);
  }

  public ColumnFamilyDefinition() {
  }

  public ColumnFamilyDefinition(
    ColumnDefinition defaultDefinition,
    Map<String,ColumnDefinition> columnDefinitions)
  {
    this();
    this.defaultDefinition = defaultDefinition;
    this.columnDefinitions = columnDefinitions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnFamilyDefinition(ColumnFamilyDefinition other) {
    if (other.isSetDefaultDefinition()) {
      this.defaultDefinition = new ColumnDefinition(other.defaultDefinition);
    }
    if (other.isSetColumnDefinitions()) {
      Map<String,ColumnDefinition> __this__columnDefinitions = new HashMap<String,ColumnDefinition>();
      for (Map.Entry<String, ColumnDefinition> other_element : other.columnDefinitions.entrySet()) {

        String other_element_key = other_element.getKey();
        ColumnDefinition other_element_value = other_element.getValue();

        String __this__columnDefinitions_copy_key = other_element_key;

        ColumnDefinition __this__columnDefinitions_copy_value = new ColumnDefinition(other_element_value);

        __this__columnDefinitions.put(__this__columnDefinitions_copy_key, __this__columnDefinitions_copy_value);
      }
      this.columnDefinitions = __this__columnDefinitions;
    }
  }

  public ColumnFamilyDefinition deepCopy() {
    return new ColumnFamilyDefinition(this);
  }

  @Override
  public void clear() {
    this.defaultDefinition = null;
    this.columnDefinitions = null;
  }

  /**
   * 
   */
  public ColumnDefinition getDefaultDefinition() {
    return this.defaultDefinition;
  }

  /**
   * 
   */
  public ColumnFamilyDefinition setDefaultDefinition(ColumnDefinition defaultDefinition) {
    this.defaultDefinition = defaultDefinition;
    return this;
  }

  public void unsetDefaultDefinition() {
    this.defaultDefinition = null;
  }

  /** Returns true if field defaultDefinition is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultDefinition() {
    return this.defaultDefinition != null;
  }

  public void setDefaultDefinitionIsSet(boolean value) {
    if (!value) {
      this.defaultDefinition = null;
    }
  }

  public int getColumnDefinitionsSize() {
    return (this.columnDefinitions == null) ? 0 : this.columnDefinitions.size();
  }

  public void putToColumnDefinitions(String key, ColumnDefinition val) {
    if (this.columnDefinitions == null) {
      this.columnDefinitions = new HashMap<String,ColumnDefinition>();
    }
    this.columnDefinitions.put(key, val);
  }

  /**
   * 
   */
  public Map<String,ColumnDefinition> getColumnDefinitions() {
    return this.columnDefinitions;
  }

  /**
   * 
   */
  public ColumnFamilyDefinition setColumnDefinitions(Map<String,ColumnDefinition> columnDefinitions) {
    this.columnDefinitions = columnDefinitions;
    return this;
  }

  public void unsetColumnDefinitions() {
    this.columnDefinitions = null;
  }

  /** Returns true if field columnDefinitions is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnDefinitions() {
    return this.columnDefinitions != null;
  }

  public void setColumnDefinitionsIsSet(boolean value) {
    if (!value) {
      this.columnDefinitions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEFAULT_DEFINITION:
      if (value == null) {
        unsetDefaultDefinition();
      } else {
        setDefaultDefinition((ColumnDefinition)value);
      }
      break;

    case COLUMN_DEFINITIONS:
      if (value == null) {
        unsetColumnDefinitions();
      } else {
        setColumnDefinitions((Map<String,ColumnDefinition>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEFAULT_DEFINITION:
      return getDefaultDefinition();

    case COLUMN_DEFINITIONS:
      return getColumnDefinitions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEFAULT_DEFINITION:
      return isSetDefaultDefinition();
    case COLUMN_DEFINITIONS:
      return isSetColumnDefinitions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnFamilyDefinition)
      return this.equals((ColumnFamilyDefinition)that);
    return false;
  }

  public boolean equals(ColumnFamilyDefinition that) {
    if (that == null)
      return false;

    boolean this_present_defaultDefinition = true && this.isSetDefaultDefinition();
    boolean that_present_defaultDefinition = true && that.isSetDefaultDefinition();
    if (this_present_defaultDefinition || that_present_defaultDefinition) {
      if (!(this_present_defaultDefinition && that_present_defaultDefinition))
        return false;
      if (!this.defaultDefinition.equals(that.defaultDefinition))
        return false;
    }

    boolean this_present_columnDefinitions = true && this.isSetColumnDefinitions();
    boolean that_present_columnDefinitions = true && that.isSetColumnDefinitions();
    if (this_present_columnDefinitions || that_present_columnDefinitions) {
      if (!(this_present_columnDefinitions && that_present_columnDefinitions))
        return false;
      if (!this.columnDefinitions.equals(that.columnDefinitions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ColumnFamilyDefinition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ColumnFamilyDefinition typedOther = (ColumnFamilyDefinition)other;

    lastComparison = Boolean.valueOf(isSetDefaultDefinition()).compareTo(typedOther.isSetDefaultDefinition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultDefinition()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.defaultDefinition, typedOther.defaultDefinition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnDefinitions()).compareTo(typedOther.isSetColumnDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnDefinitions()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.columnDefinitions, typedOther.columnDefinitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnFamilyDefinition(");
    boolean first = true;

    sb.append("defaultDefinition:");
    if (this.defaultDefinition == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultDefinition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnDefinitions:");
    if (this.columnDefinitions == null) {
      sb.append("null");
    } else {
      sb.append(this.columnDefinitions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultDefinition != null) {
      defaultDefinition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnFamilyDefinitionStandardSchemeFactory implements SchemeFactory {
    public ColumnFamilyDefinitionStandardScheme getScheme() {
      return new ColumnFamilyDefinitionStandardScheme();
    }
  }

  private static class ColumnFamilyDefinitionStandardScheme extends StandardScheme<ColumnFamilyDefinition> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, ColumnFamilyDefinition struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEFAULT_DEFINITION
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
              struct.defaultDefinition = new ColumnDefinition();
              struct.defaultDefinition.read(iprot);
              struct.setDefaultDefinitionIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_DEFINITIONS
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map130 = iprot.readMapBegin();
                struct.columnDefinitions = new HashMap<String,ColumnDefinition>(2*_map130.size);
                for (int _i131 = 0; _i131 < _map130.size; ++_i131)
                {
                  String _key132; // required
                  ColumnDefinition _val133; // optional
                  _key132 = iprot.readString();
                  _val133 = new ColumnDefinition();
                  _val133.read(iprot);
                  struct.columnDefinitions.put(_key132, _val133);
                }
                iprot.readMapEnd();
              }
              struct.setColumnDefinitionsIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, ColumnFamilyDefinition struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.defaultDefinition != null) {
        oprot.writeFieldBegin(DEFAULT_DEFINITION_FIELD_DESC);
        struct.defaultDefinition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.columnDefinitions != null) {
        oprot.writeFieldBegin(COLUMN_DEFINITIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.columnDefinitions.size()));
          for (Map.Entry<String, ColumnDefinition> _iter134 : struct.columnDefinitions.entrySet())
          {
            oprot.writeString(_iter134.getKey());
            _iter134.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnFamilyDefinitionTupleSchemeFactory implements SchemeFactory {
    public ColumnFamilyDefinitionTupleScheme getScheme() {
      return new ColumnFamilyDefinitionTupleScheme();
    }
  }

  private static class ColumnFamilyDefinitionTupleScheme extends TupleScheme<ColumnFamilyDefinition> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ColumnFamilyDefinition struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDefaultDefinition()) {
        optionals.set(0);
      }
      if (struct.isSetColumnDefinitions()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDefaultDefinition()) {
        struct.defaultDefinition.write(oprot);
      }
      if (struct.isSetColumnDefinitions()) {
        {
          oprot.writeI32(struct.columnDefinitions.size());
          for (Map.Entry<String, ColumnDefinition> _iter135 : struct.columnDefinitions.entrySet())
          {
            oprot.writeString(_iter135.getKey());
            _iter135.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ColumnFamilyDefinition struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.defaultDefinition = new ColumnDefinition();
        struct.defaultDefinition.read(iprot);
        struct.setDefaultDefinitionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map136 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
          struct.columnDefinitions = new HashMap<String,ColumnDefinition>(2*_map136.size);
          for (int _i137 = 0; _i137 < _map136.size; ++_i137)
          {
            String _key138; // required
            ColumnDefinition _val139; // optional
            _key138 = iprot.readString();
            _val139 = new ColumnDefinition();
            _val139.read(iprot);
            struct.columnDefinitions.put(_key138, _val139);
          }
        }
        struct.setColumnDefinitionsIsSet(true);
      }
    }
  }

}

