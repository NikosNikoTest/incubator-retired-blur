/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 */
public class ColumnDefinition implements org.apache.thrift.TBase<ColumnDefinition, ColumnDefinition._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnDefinition");

  private static final org.apache.thrift.protocol.TField ANALYZER_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("analyzerClassName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FULL_TEXT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("fullTextIndex", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField ALTERNATE_COLUMN_DEFINITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("alternateColumnDefinitions", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnDefinitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnDefinitionTupleSchemeFactory());
  }

  public String analyzerClassName; // required
  public boolean fullTextIndex; // required
  public Map<String,AlternateColumnDefinition> alternateColumnDefinitions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANALYZER_CLASS_NAME((short)1, "analyzerClassName"),
    FULL_TEXT_INDEX((short)2, "fullTextIndex"),
    ALTERNATE_COLUMN_DEFINITIONS((short)3, "alternateColumnDefinitions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANALYZER_CLASS_NAME
          return ANALYZER_CLASS_NAME;
        case 2: // FULL_TEXT_INDEX
          return FULL_TEXT_INDEX;
        case 3: // ALTERNATE_COLUMN_DEFINITIONS
          return ALTERNATE_COLUMN_DEFINITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FULLTEXTINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANALYZER_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("analyzerClassName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FULL_TEXT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("fullTextIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALTERNATE_COLUMN_DEFINITIONS, new org.apache.thrift.meta_data.FieldMetaData("alternateColumnDefinitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AlternateColumnDefinition.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnDefinition.class, metaDataMap);
  }

  public ColumnDefinition() {
    this.analyzerClassName = "org.apache.lucene.analysis.standard.StandardAnalyzer";

  }

  public ColumnDefinition(
    String analyzerClassName,
    boolean fullTextIndex,
    Map<String,AlternateColumnDefinition> alternateColumnDefinitions)
  {
    this();
    this.analyzerClassName = analyzerClassName;
    this.fullTextIndex = fullTextIndex;
    setFullTextIndexIsSet(true);
    this.alternateColumnDefinitions = alternateColumnDefinitions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnDefinition(ColumnDefinition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAnalyzerClassName()) {
      this.analyzerClassName = other.analyzerClassName;
    }
    this.fullTextIndex = other.fullTextIndex;
    if (other.isSetAlternateColumnDefinitions()) {
      Map<String,AlternateColumnDefinition> __this__alternateColumnDefinitions = new HashMap<String,AlternateColumnDefinition>();
      for (Map.Entry<String, AlternateColumnDefinition> other_element : other.alternateColumnDefinitions.entrySet()) {

        String other_element_key = other_element.getKey();
        AlternateColumnDefinition other_element_value = other_element.getValue();

        String __this__alternateColumnDefinitions_copy_key = other_element_key;

        AlternateColumnDefinition __this__alternateColumnDefinitions_copy_value = new AlternateColumnDefinition(other_element_value);

        __this__alternateColumnDefinitions.put(__this__alternateColumnDefinitions_copy_key, __this__alternateColumnDefinitions_copy_value);
      }
      this.alternateColumnDefinitions = __this__alternateColumnDefinitions;
    }
  }

  public ColumnDefinition deepCopy() {
    return new ColumnDefinition(this);
  }

  @Override
  public void clear() {
    this.analyzerClassName = "org.apache.lucene.analysis.standard.StandardAnalyzer";

    setFullTextIndexIsSet(false);
    this.fullTextIndex = false;
    this.alternateColumnDefinitions = null;
  }

  public String getAnalyzerClassName() {
    return this.analyzerClassName;
  }

  public ColumnDefinition setAnalyzerClassName(String analyzerClassName) {
    this.analyzerClassName = analyzerClassName;
    return this;
  }

  public void unsetAnalyzerClassName() {
    this.analyzerClassName = null;
  }

  /** Returns true if field analyzerClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalyzerClassName() {
    return this.analyzerClassName != null;
  }

  public void setAnalyzerClassNameIsSet(boolean value) {
    if (!value) {
      this.analyzerClassName = null;
    }
  }

  public boolean isFullTextIndex() {
    return this.fullTextIndex;
  }

  public ColumnDefinition setFullTextIndex(boolean fullTextIndex) {
    this.fullTextIndex = fullTextIndex;
    setFullTextIndexIsSet(true);
    return this;
  }

  public void unsetFullTextIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FULLTEXTINDEX_ISSET_ID);
  }

  /** Returns true if field fullTextIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetFullTextIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __FULLTEXTINDEX_ISSET_ID);
  }

  public void setFullTextIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FULLTEXTINDEX_ISSET_ID, value);
  }

  public int getAlternateColumnDefinitionsSize() {
    return (this.alternateColumnDefinitions == null) ? 0 : this.alternateColumnDefinitions.size();
  }

  public void putToAlternateColumnDefinitions(String key, AlternateColumnDefinition val) {
    if (this.alternateColumnDefinitions == null) {
      this.alternateColumnDefinitions = new HashMap<String,AlternateColumnDefinition>();
    }
    this.alternateColumnDefinitions.put(key, val);
  }

  public Map<String,AlternateColumnDefinition> getAlternateColumnDefinitions() {
    return this.alternateColumnDefinitions;
  }

  public ColumnDefinition setAlternateColumnDefinitions(Map<String,AlternateColumnDefinition> alternateColumnDefinitions) {
    this.alternateColumnDefinitions = alternateColumnDefinitions;
    return this;
  }

  public void unsetAlternateColumnDefinitions() {
    this.alternateColumnDefinitions = null;
  }

  /** Returns true if field alternateColumnDefinitions is set (has been assigned a value) and false otherwise */
  public boolean isSetAlternateColumnDefinitions() {
    return this.alternateColumnDefinitions != null;
  }

  public void setAlternateColumnDefinitionsIsSet(boolean value) {
    if (!value) {
      this.alternateColumnDefinitions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANALYZER_CLASS_NAME:
      if (value == null) {
        unsetAnalyzerClassName();
      } else {
        setAnalyzerClassName((String)value);
      }
      break;

    case FULL_TEXT_INDEX:
      if (value == null) {
        unsetFullTextIndex();
      } else {
        setFullTextIndex((Boolean)value);
      }
      break;

    case ALTERNATE_COLUMN_DEFINITIONS:
      if (value == null) {
        unsetAlternateColumnDefinitions();
      } else {
        setAlternateColumnDefinitions((Map<String,AlternateColumnDefinition>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANALYZER_CLASS_NAME:
      return getAnalyzerClassName();

    case FULL_TEXT_INDEX:
      return Boolean.valueOf(isFullTextIndex());

    case ALTERNATE_COLUMN_DEFINITIONS:
      return getAlternateColumnDefinitions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANALYZER_CLASS_NAME:
      return isSetAnalyzerClassName();
    case FULL_TEXT_INDEX:
      return isSetFullTextIndex();
    case ALTERNATE_COLUMN_DEFINITIONS:
      return isSetAlternateColumnDefinitions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnDefinition)
      return this.equals((ColumnDefinition)that);
    return false;
  }

  public boolean equals(ColumnDefinition that) {
    if (that == null)
      return false;

    boolean this_present_analyzerClassName = true && this.isSetAnalyzerClassName();
    boolean that_present_analyzerClassName = true && that.isSetAnalyzerClassName();
    if (this_present_analyzerClassName || that_present_analyzerClassName) {
      if (!(this_present_analyzerClassName && that_present_analyzerClassName))
        return false;
      if (!this.analyzerClassName.equals(that.analyzerClassName))
        return false;
    }

    boolean this_present_fullTextIndex = true;
    boolean that_present_fullTextIndex = true;
    if (this_present_fullTextIndex || that_present_fullTextIndex) {
      if (!(this_present_fullTextIndex && that_present_fullTextIndex))
        return false;
      if (this.fullTextIndex != that.fullTextIndex)
        return false;
    }

    boolean this_present_alternateColumnDefinitions = true && this.isSetAlternateColumnDefinitions();
    boolean that_present_alternateColumnDefinitions = true && that.isSetAlternateColumnDefinitions();
    if (this_present_alternateColumnDefinitions || that_present_alternateColumnDefinitions) {
      if (!(this_present_alternateColumnDefinitions && that_present_alternateColumnDefinitions))
        return false;
      if (!this.alternateColumnDefinitions.equals(that.alternateColumnDefinitions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ColumnDefinition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ColumnDefinition typedOther = (ColumnDefinition)other;

    lastComparison = Boolean.valueOf(isSetAnalyzerClassName()).compareTo(typedOther.isSetAnalyzerClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalyzerClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analyzerClassName, typedOther.analyzerClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullTextIndex()).compareTo(typedOther.isSetFullTextIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullTextIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullTextIndex, typedOther.fullTextIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlternateColumnDefinitions()).compareTo(typedOther.isSetAlternateColumnDefinitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlternateColumnDefinitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alternateColumnDefinitions, typedOther.alternateColumnDefinitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnDefinition(");
    boolean first = true;

    sb.append("analyzerClassName:");
    if (this.analyzerClassName == null) {
      sb.append("null");
    } else {
      sb.append(this.analyzerClassName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullTextIndex:");
    sb.append(this.fullTextIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("alternateColumnDefinitions:");
    if (this.alternateColumnDefinitions == null) {
      sb.append("null");
    } else {
      sb.append(this.alternateColumnDefinitions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnDefinitionStandardSchemeFactory implements SchemeFactory {
    public ColumnDefinitionStandardScheme getScheme() {
      return new ColumnDefinitionStandardScheme();
    }
  }

  private static class ColumnDefinitionStandardScheme extends StandardScheme<ColumnDefinition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnDefinition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANALYZER_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.analyzerClassName = iprot.readString();
              struct.setAnalyzerClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FULL_TEXT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fullTextIndex = iprot.readBool();
              struct.setFullTextIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALTERNATE_COLUMN_DEFINITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                struct.alternateColumnDefinitions = new HashMap<String,AlternateColumnDefinition>(2*_map120.size);
                for (int _i121 = 0; _i121 < _map120.size; ++_i121)
                {
                  String _key122; // required
                  AlternateColumnDefinition _val123; // optional
                  _key122 = iprot.readString();
                  _val123 = new AlternateColumnDefinition();
                  _val123.read(iprot);
                  struct.alternateColumnDefinitions.put(_key122, _val123);
                }
                iprot.readMapEnd();
              }
              struct.setAlternateColumnDefinitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnDefinition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.analyzerClassName != null) {
        oprot.writeFieldBegin(ANALYZER_CLASS_NAME_FIELD_DESC);
        oprot.writeString(struct.analyzerClassName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FULL_TEXT_INDEX_FIELD_DESC);
      oprot.writeBool(struct.fullTextIndex);
      oprot.writeFieldEnd();
      if (struct.alternateColumnDefinitions != null) {
        oprot.writeFieldBegin(ALTERNATE_COLUMN_DEFINITIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.alternateColumnDefinitions.size()));
          for (Map.Entry<String, AlternateColumnDefinition> _iter124 : struct.alternateColumnDefinitions.entrySet())
          {
            oprot.writeString(_iter124.getKey());
            _iter124.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnDefinitionTupleSchemeFactory implements SchemeFactory {
    public ColumnDefinitionTupleScheme getScheme() {
      return new ColumnDefinitionTupleScheme();
    }
  }

  private static class ColumnDefinitionTupleScheme extends TupleScheme<ColumnDefinition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnalyzerClassName()) {
        optionals.set(0);
      }
      if (struct.isSetFullTextIndex()) {
        optionals.set(1);
      }
      if (struct.isSetAlternateColumnDefinitions()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAnalyzerClassName()) {
        oprot.writeString(struct.analyzerClassName);
      }
      if (struct.isSetFullTextIndex()) {
        oprot.writeBool(struct.fullTextIndex);
      }
      if (struct.isSetAlternateColumnDefinitions()) {
        {
          oprot.writeI32(struct.alternateColumnDefinitions.size());
          for (Map.Entry<String, AlternateColumnDefinition> _iter125 : struct.alternateColumnDefinitions.entrySet())
          {
            oprot.writeString(_iter125.getKey());
            _iter125.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnDefinition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.analyzerClassName = iprot.readString();
        struct.setAnalyzerClassNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fullTextIndex = iprot.readBool();
        struct.setFullTextIndexIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.alternateColumnDefinitions = new HashMap<String,AlternateColumnDefinition>(2*_map126.size);
          for (int _i127 = 0; _i127 < _map126.size; ++_i127)
          {
            String _key128; // required
            AlternateColumnDefinition _val129; // optional
            _key128 = iprot.readString();
            _val129 = new AlternateColumnDefinition();
            _val129.read(iprot);
            struct.alternateColumnDefinitions.put(_key128, _val129);
          }
        }
        struct.setAlternateColumnDefinitionsIsSet(true);
      }
    }
  }

}

