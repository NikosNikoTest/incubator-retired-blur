/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

/**
 * FetchResult contains the row or record fetch result based if the Selector was going to fetch the entire row or a single record.
 */
public class FetchResult implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<FetchResult, FetchResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("FetchResult");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField EXISTS_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("exists", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField DELETED_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("deleted", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)2);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField TABLE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("table", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)3);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField ROW_RESULT_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("rowResult", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)4);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField RECORD_RESULT_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("recordResult", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FetchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FetchResultTupleSchemeFactory());
  }

  /**
   * True if the result exists, false if it doesn't.
   */
  public boolean exists; // required
  /**
   * If the row was marked as deleted.
   */
  public boolean deleted; // required
  /**
   * The table the fetch result came from.
   */
  public String table; // required
  /**
   * The row result if a row was selected form the Selector.
   */
  public FetchRowResult rowResult; // required
  /**
   * The record result if a record was selected form the Selector.
   */
  public FetchRecordResult recordResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    /**
     * True if the result exists, false if it doesn't.
     */
    EXISTS((short)1, "exists"),
    /**
     * If the row was marked as deleted.
     */
    DELETED((short)2, "deleted"),
    /**
     * The table the fetch result came from.
     */
    TABLE((short)3, "table"),
    /**
     * The row result if a row was selected form the Selector.
     */
    ROW_RESULT((short)4, "rowResult"),
    /**
     * The record result if a record was selected form the Selector.
     */
    RECORD_RESULT((short)5, "recordResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXISTS
          return EXISTS;
        case 2: // DELETED
          return DELETED;
        case 3: // TABLE
          return TABLE;
        case 4: // ROW_RESULT
          return ROW_RESULT;
        case 5: // RECORD_RESULT
          return RECORD_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXISTS_ISSET_ID = 0;
  private static final int __DELETED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXISTS, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("exists", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETED, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("deleted", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TABLE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("table", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_RESULT, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("rowResult", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, FetchRowResult.class)));
    tmpMap.put(_Fields.RECORD_RESULT, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("recordResult", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, FetchRecordResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(FetchResult.class, metaDataMap);
  }

  public FetchResult() {
  }

  public FetchResult(
    boolean exists,
    boolean deleted,
    String table,
    FetchRowResult rowResult,
    FetchRecordResult recordResult)
  {
    this();
    this.exists = exists;
    setExistsIsSet(true);
    this.deleted = deleted;
    setDeletedIsSet(true);
    this.table = table;
    this.rowResult = rowResult;
    this.recordResult = recordResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchResult(FetchResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.exists = other.exists;
    this.deleted = other.deleted;
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetRowResult()) {
      this.rowResult = new FetchRowResult(other.rowResult);
    }
    if (other.isSetRecordResult()) {
      this.recordResult = new FetchRecordResult(other.recordResult);
    }
  }

  public FetchResult deepCopy() {
    return new FetchResult(this);
  }

  @Override
  public void clear() {
    setExistsIsSet(false);
    this.exists = false;
    setDeletedIsSet(false);
    this.deleted = false;
    this.table = null;
    this.rowResult = null;
    this.recordResult = null;
  }

  /**
   * True if the result exists, false if it doesn't.
   */
  public boolean isExists() {
    return this.exists;
  }

  /**
   * True if the result exists, false if it doesn't.
   */
  public FetchResult setExists(boolean exists) {
    this.exists = exists;
    setExistsIsSet(true);
    return this;
  }

  public void unsetExists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXISTS_ISSET_ID);
  }

  /** Returns true if field exists is set (has been assigned a value) and false otherwise */
  public boolean isSetExists() {
    return EncodingUtils.testBit(__isset_bitfield, __EXISTS_ISSET_ID);
  }

  public void setExistsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXISTS_ISSET_ID, value);
  }

  /**
   * If the row was marked as deleted.
   */
  public boolean isDeleted() {
    return this.deleted;
  }

  /**
   * If the row was marked as deleted.
   */
  public FetchResult setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
    return this;
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  /**
   * The table the fetch result came from.
   */
  public String getTable() {
    return this.table;
  }

  /**
   * The table the fetch result came from.
   */
  public FetchResult setTable(String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  /**
   * The row result if a row was selected form the Selector.
   */
  public FetchRowResult getRowResult() {
    return this.rowResult;
  }

  /**
   * The row result if a row was selected form the Selector.
   */
  public FetchResult setRowResult(FetchRowResult rowResult) {
    this.rowResult = rowResult;
    return this;
  }

  public void unsetRowResult() {
    this.rowResult = null;
  }

  /** Returns true if field rowResult is set (has been assigned a value) and false otherwise */
  public boolean isSetRowResult() {
    return this.rowResult != null;
  }

  public void setRowResultIsSet(boolean value) {
    if (!value) {
      this.rowResult = null;
    }
  }

  /**
   * The record result if a record was selected form the Selector.
   */
  public FetchRecordResult getRecordResult() {
    return this.recordResult;
  }

  /**
   * The record result if a record was selected form the Selector.
   */
  public FetchResult setRecordResult(FetchRecordResult recordResult) {
    this.recordResult = recordResult;
    return this;
  }

  public void unsetRecordResult() {
    this.recordResult = null;
  }

  /** Returns true if field recordResult is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordResult() {
    return this.recordResult != null;
  }

  public void setRecordResultIsSet(boolean value) {
    if (!value) {
      this.recordResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXISTS:
      if (value == null) {
        unsetExists();
      } else {
        setExists((Boolean)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((String)value);
      }
      break;

    case ROW_RESULT:
      if (value == null) {
        unsetRowResult();
      } else {
        setRowResult((FetchRowResult)value);
      }
      break;

    case RECORD_RESULT:
      if (value == null) {
        unsetRecordResult();
      } else {
        setRecordResult((FetchRecordResult)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXISTS:
      return Boolean.valueOf(isExists());

    case DELETED:
      return Boolean.valueOf(isDeleted());

    case TABLE:
      return getTable();

    case ROW_RESULT:
      return getRowResult();

    case RECORD_RESULT:
      return getRecordResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXISTS:
      return isSetExists();
    case DELETED:
      return isSetDeleted();
    case TABLE:
      return isSetTable();
    case ROW_RESULT:
      return isSetRowResult();
    case RECORD_RESULT:
      return isSetRecordResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchResult)
      return this.equals((FetchResult)that);
    return false;
  }

  public boolean equals(FetchResult that) {
    if (that == null)
      return false;

    boolean this_present_exists = true;
    boolean that_present_exists = true;
    if (this_present_exists || that_present_exists) {
      if (!(this_present_exists && that_present_exists))
        return false;
      if (this.exists != that.exists)
        return false;
    }

    boolean this_present_deleted = true;
    boolean that_present_deleted = true;
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_rowResult = true && this.isSetRowResult();
    boolean that_present_rowResult = true && that.isSetRowResult();
    if (this_present_rowResult || that_present_rowResult) {
      if (!(this_present_rowResult && that_present_rowResult))
        return false;
      if (!this.rowResult.equals(that.rowResult))
        return false;
    }

    boolean this_present_recordResult = true && this.isSetRecordResult();
    boolean that_present_recordResult = true && that.isSetRecordResult();
    if (this_present_recordResult || that_present_recordResult) {
      if (!(this_present_recordResult && that_present_recordResult))
        return false;
      if (!this.recordResult.equals(that.recordResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FetchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FetchResult typedOther = (FetchResult)other;

    lastComparison = Boolean.valueOf(isSetExists()).compareTo(typedOther.isSetExists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExists()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.exists, typedOther.exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(typedOther.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.deleted, typedOther.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable()).compareTo(typedOther.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.table, typedOther.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowResult()).compareTo(typedOther.isSetRowResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowResult()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.rowResult, typedOther.rowResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordResult()).compareTo(typedOther.isSetRecordResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordResult()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.recordResult, typedOther.recordResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FetchResult(");
    boolean first = true;

    sb.append("exists:");
    sb.append(this.exists);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deleted:");
    sb.append(this.deleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowResult:");
    if (this.rowResult == null) {
      sb.append("null");
    } else {
      sb.append(this.rowResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordResult:");
    if (this.recordResult == null) {
      sb.append("null");
    } else {
      sb.append(this.recordResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
    if (rowResult != null) {
      rowResult.validate();
    }
    if (recordResult != null) {
      recordResult.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchResultStandardSchemeFactory implements SchemeFactory {
    public FetchResultStandardScheme getScheme() {
      return new FetchResultStandardScheme();
    }
  }

  private static class FetchResultStandardScheme extends StandardScheme<FetchResult> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, FetchResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXISTS
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
              struct.exists = iprot.readBool();
              struct.setExistsIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DELETED
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
              struct.table = iprot.readString();
              struct.setTableIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_RESULT
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
              struct.rowResult = new FetchRowResult();
              struct.rowResult.read(iprot);
              struct.setRowResultIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECORD_RESULT
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
              struct.recordResult = new FetchRecordResult();
              struct.recordResult.read(iprot);
              struct.setRecordResultIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, FetchResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXISTS_FIELD_DESC);
      oprot.writeBool(struct.exists);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELETED_FIELD_DESC);
      oprot.writeBool(struct.deleted);
      oprot.writeFieldEnd();
      if (struct.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(struct.table);
        oprot.writeFieldEnd();
      }
      if (struct.rowResult != null) {
        oprot.writeFieldBegin(ROW_RESULT_FIELD_DESC);
        struct.rowResult.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.recordResult != null) {
        oprot.writeFieldBegin(RECORD_RESULT_FIELD_DESC);
        struct.recordResult.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchResultTupleSchemeFactory implements SchemeFactory {
    public FetchResultTupleScheme getScheme() {
      return new FetchResultTupleScheme();
    }
  }

  private static class FetchResultTupleScheme extends TupleScheme<FetchResult> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, FetchResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExists()) {
        optionals.set(0);
      }
      if (struct.isSetDeleted()) {
        optionals.set(1);
      }
      if (struct.isSetTable()) {
        optionals.set(2);
      }
      if (struct.isSetRowResult()) {
        optionals.set(3);
      }
      if (struct.isSetRecordResult()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExists()) {
        oprot.writeBool(struct.exists);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
      if (struct.isSetTable()) {
        oprot.writeString(struct.table);
      }
      if (struct.isSetRowResult()) {
        struct.rowResult.write(oprot);
      }
      if (struct.isSetRecordResult()) {
        struct.recordResult.write(oprot);
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, FetchResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.exists = iprot.readBool();
        struct.setExistsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table = iprot.readString();
        struct.setTableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rowResult = new FetchRowResult();
        struct.rowResult.read(iprot);
        struct.setRowResultIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recordResult = new FetchRecordResult();
        struct.recordResult.read(iprot);
        struct.setRecordResultIsSet(true);
      }
    }
  }

}

