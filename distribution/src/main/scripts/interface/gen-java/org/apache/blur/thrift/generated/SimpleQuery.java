/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

/**
 * The SimpleQuery object holds the query string (normal Lucene syntax),
 * filters and type of scoring (used when super query is on).
 */
public class SimpleQuery implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<SimpleQuery, SimpleQuery._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("SimpleQuery");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField QUERY_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("query", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField ROW_QUERY_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("rowQuery", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)2);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField SCORE_TYPE_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("scoreType", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)3);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField ROW_FILTER_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("rowFilter", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)4);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField RECORD_FILTER_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("recordFilter", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleQueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleQueryTupleSchemeFactory());
  }

  /**
   * A Lucene syntax based query.
   */
  public String query; // required
  /**
   * If the Row query is on, meaning the query will be perform against all the
   * Records (joining records in some cases) and the result will be Rows (groupings of Record).
   */
  public boolean rowQuery; // required
  /**
   * The scoring type, see the document on ScoreType for explanation of each score type.
   * 
   * @see ScoreType
   */
  public ScoreType scoreType; // required
  /**
   * The Row filter (normal Lucene syntax), is a filter performed
   * after the join to filter out entire Rows from the results.
   */
  public String rowFilter; // required
  /**
   * The Record filter (normal Lucene syntax), is a filter performed
   * before the join to filter out Records from the results.
   */
  public String recordFilter; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    /**
     * A Lucene syntax based query.
     */
    QUERY((short)1, "query"),
    /**
     * If the Row query is on, meaning the query will be perform against all the
     * Records (joining records in some cases) and the result will be Rows (groupings of Record).
     */
    ROW_QUERY((short)2, "rowQuery"),
    /**
     * The scoring type, see the document on ScoreType for explanation of each score type.
     * 
     * @see ScoreType
     */
    SCORE_TYPE((short)3, "scoreType"),
    /**
     * The Row filter (normal Lucene syntax), is a filter performed
     * after the join to filter out entire Rows from the results.
     */
    ROW_FILTER((short)4, "rowFilter"),
    /**
     * The Record filter (normal Lucene syntax), is a filter performed
     * before the join to filter out Records from the results.
     */
    RECORD_FILTER((short)5, "recordFilter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // ROW_QUERY
          return ROW_QUERY;
        case 3: // SCORE_TYPE
          return SCORE_TYPE;
        case 4: // ROW_FILTER
          return ROW_FILTER;
        case 5: // RECORD_FILTER
          return RECORD_FILTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROWQUERY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("query", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_QUERY, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("rowQuery", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCORE_TYPE, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("scoreType", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.EnumMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.ENUM, ScoreType.class)));
    tmpMap.put(_Fields.ROW_FILTER, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("rowFilter", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_FILTER, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("recordFilter", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(SimpleQuery.class, metaDataMap);
  }

  public SimpleQuery() {
    this.rowQuery = true;

    this.scoreType = org.apache.blur.thrift.generated.ScoreType.SUPER;

  }

  public SimpleQuery(
    String query,
    boolean rowQuery,
    ScoreType scoreType,
    String rowFilter,
    String recordFilter)
  {
    this();
    this.query = query;
    this.rowQuery = rowQuery;
    setRowQueryIsSet(true);
    this.scoreType = scoreType;
    this.rowFilter = rowFilter;
    this.recordFilter = recordFilter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleQuery(SimpleQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    this.rowQuery = other.rowQuery;
    if (other.isSetScoreType()) {
      this.scoreType = other.scoreType;
    }
    if (other.isSetRowFilter()) {
      this.rowFilter = other.rowFilter;
    }
    if (other.isSetRecordFilter()) {
      this.recordFilter = other.recordFilter;
    }
  }

  public SimpleQuery deepCopy() {
    return new SimpleQuery(this);
  }

  @Override
  public void clear() {
    this.query = null;
    this.rowQuery = true;

    this.scoreType = org.apache.blur.thrift.generated.ScoreType.SUPER;

    this.rowFilter = null;
    this.recordFilter = null;
  }

  /**
   * A Lucene syntax based query.
   */
  public String getQuery() {
    return this.query;
  }

  /**
   * A Lucene syntax based query.
   */
  public SimpleQuery setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  /**
   * If the Row query is on, meaning the query will be perform against all the
   * Records (joining records in some cases) and the result will be Rows (groupings of Record).
   */
  public boolean isRowQuery() {
    return this.rowQuery;
  }

  /**
   * If the Row query is on, meaning the query will be perform against all the
   * Records (joining records in some cases) and the result will be Rows (groupings of Record).
   */
  public SimpleQuery setRowQuery(boolean rowQuery) {
    this.rowQuery = rowQuery;
    setRowQueryIsSet(true);
    return this;
  }

  public void unsetRowQuery() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWQUERY_ISSET_ID);
  }

  /** Returns true if field rowQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetRowQuery() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWQUERY_ISSET_ID);
  }

  public void setRowQueryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWQUERY_ISSET_ID, value);
  }

  /**
   * The scoring type, see the document on ScoreType for explanation of each score type.
   * 
   * @see ScoreType
   */
  public ScoreType getScoreType() {
    return this.scoreType;
  }

  /**
   * The scoring type, see the document on ScoreType for explanation of each score type.
   * 
   * @see ScoreType
   */
  public SimpleQuery setScoreType(ScoreType scoreType) {
    this.scoreType = scoreType;
    return this;
  }

  public void unsetScoreType() {
    this.scoreType = null;
  }

  /** Returns true if field scoreType is set (has been assigned a value) and false otherwise */
  public boolean isSetScoreType() {
    return this.scoreType != null;
  }

  public void setScoreTypeIsSet(boolean value) {
    if (!value) {
      this.scoreType = null;
    }
  }

  /**
   * The Row filter (normal Lucene syntax), is a filter performed
   * after the join to filter out entire Rows from the results.
   */
  public String getRowFilter() {
    return this.rowFilter;
  }

  /**
   * The Row filter (normal Lucene syntax), is a filter performed
   * after the join to filter out entire Rows from the results.
   */
  public SimpleQuery setRowFilter(String rowFilter) {
    this.rowFilter = rowFilter;
    return this;
  }

  public void unsetRowFilter() {
    this.rowFilter = null;
  }

  /** Returns true if field rowFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetRowFilter() {
    return this.rowFilter != null;
  }

  public void setRowFilterIsSet(boolean value) {
    if (!value) {
      this.rowFilter = null;
    }
  }

  /**
   * The Record filter (normal Lucene syntax), is a filter performed
   * before the join to filter out Records from the results.
   */
  public String getRecordFilter() {
    return this.recordFilter;
  }

  /**
   * The Record filter (normal Lucene syntax), is a filter performed
   * before the join to filter out Records from the results.
   */
  public SimpleQuery setRecordFilter(String recordFilter) {
    this.recordFilter = recordFilter;
    return this;
  }

  public void unsetRecordFilter() {
    this.recordFilter = null;
  }

  /** Returns true if field recordFilter is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordFilter() {
    return this.recordFilter != null;
  }

  public void setRecordFilterIsSet(boolean value) {
    if (!value) {
      this.recordFilter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case ROW_QUERY:
      if (value == null) {
        unsetRowQuery();
      } else {
        setRowQuery((Boolean)value);
      }
      break;

    case SCORE_TYPE:
      if (value == null) {
        unsetScoreType();
      } else {
        setScoreType((ScoreType)value);
      }
      break;

    case ROW_FILTER:
      if (value == null) {
        unsetRowFilter();
      } else {
        setRowFilter((String)value);
      }
      break;

    case RECORD_FILTER:
      if (value == null) {
        unsetRecordFilter();
      } else {
        setRecordFilter((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case ROW_QUERY:
      return Boolean.valueOf(isRowQuery());

    case SCORE_TYPE:
      return getScoreType();

    case ROW_FILTER:
      return getRowFilter();

    case RECORD_FILTER:
      return getRecordFilter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case ROW_QUERY:
      return isSetRowQuery();
    case SCORE_TYPE:
      return isSetScoreType();
    case ROW_FILTER:
      return isSetRowFilter();
    case RECORD_FILTER:
      return isSetRecordFilter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleQuery)
      return this.equals((SimpleQuery)that);
    return false;
  }

  public boolean equals(SimpleQuery that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_rowQuery = true;
    boolean that_present_rowQuery = true;
    if (this_present_rowQuery || that_present_rowQuery) {
      if (!(this_present_rowQuery && that_present_rowQuery))
        return false;
      if (this.rowQuery != that.rowQuery)
        return false;
    }

    boolean this_present_scoreType = true && this.isSetScoreType();
    boolean that_present_scoreType = true && that.isSetScoreType();
    if (this_present_scoreType || that_present_scoreType) {
      if (!(this_present_scoreType && that_present_scoreType))
        return false;
      if (!this.scoreType.equals(that.scoreType))
        return false;
    }

    boolean this_present_rowFilter = true && this.isSetRowFilter();
    boolean that_present_rowFilter = true && that.isSetRowFilter();
    if (this_present_rowFilter || that_present_rowFilter) {
      if (!(this_present_rowFilter && that_present_rowFilter))
        return false;
      if (!this.rowFilter.equals(that.rowFilter))
        return false;
    }

    boolean this_present_recordFilter = true && this.isSetRecordFilter();
    boolean that_present_recordFilter = true && that.isSetRecordFilter();
    if (this_present_recordFilter || that_present_recordFilter) {
      if (!(this_present_recordFilter && that_present_recordFilter))
        return false;
      if (!this.recordFilter.equals(that.recordFilter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SimpleQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleQuery typedOther = (SimpleQuery)other;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.query, typedOther.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowQuery()).compareTo(typedOther.isSetRowQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowQuery()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.rowQuery, typedOther.rowQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScoreType()).compareTo(typedOther.isSetScoreType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScoreType()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.scoreType, typedOther.scoreType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowFilter()).compareTo(typedOther.isSetRowFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowFilter()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.rowFilter, typedOther.rowFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordFilter()).compareTo(typedOther.isSetRecordFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordFilter()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.recordFilter, typedOther.recordFilter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleQuery(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowQuery:");
    sb.append(this.rowQuery);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scoreType:");
    if (this.scoreType == null) {
      sb.append("null");
    } else {
      sb.append(this.scoreType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowFilter:");
    if (this.rowFilter == null) {
      sb.append("null");
    } else {
      sb.append(this.rowFilter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordFilter:");
    if (this.recordFilter == null) {
      sb.append("null");
    } else {
      sb.append(this.recordFilter);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleQueryStandardSchemeFactory implements SchemeFactory {
    public SimpleQueryStandardScheme getScheme() {
      return new SimpleQueryStandardScheme();
    }
  }

  private static class SimpleQueryStandardScheme extends StandardScheme<SimpleQuery> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, SimpleQuery struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROW_QUERY
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
              struct.rowQuery = iprot.readBool();
              struct.setRowQueryIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCORE_TYPE
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32) {
              struct.scoreType = ScoreType.findByValue(iprot.readI32());
              struct.setScoreTypeIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROW_FILTER
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
              struct.rowFilter = iprot.readString();
              struct.setRowFilterIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECORD_FILTER
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
              struct.recordFilter = iprot.readString();
              struct.setRecordFilterIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, SimpleQuery struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROW_QUERY_FIELD_DESC);
      oprot.writeBool(struct.rowQuery);
      oprot.writeFieldEnd();
      if (struct.scoreType != null) {
        oprot.writeFieldBegin(SCORE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.scoreType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.rowFilter != null) {
        oprot.writeFieldBegin(ROW_FILTER_FIELD_DESC);
        oprot.writeString(struct.rowFilter);
        oprot.writeFieldEnd();
      }
      if (struct.recordFilter != null) {
        oprot.writeFieldBegin(RECORD_FILTER_FIELD_DESC);
        oprot.writeString(struct.recordFilter);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleQueryTupleSchemeFactory implements SchemeFactory {
    public SimpleQueryTupleScheme getScheme() {
      return new SimpleQueryTupleScheme();
    }
  }

  private static class SimpleQueryTupleScheme extends TupleScheme<SimpleQuery> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, SimpleQuery struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetRowQuery()) {
        optionals.set(1);
      }
      if (struct.isSetScoreType()) {
        optionals.set(2);
      }
      if (struct.isSetRowFilter()) {
        optionals.set(3);
      }
      if (struct.isSetRecordFilter()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetRowQuery()) {
        oprot.writeBool(struct.rowQuery);
      }
      if (struct.isSetScoreType()) {
        oprot.writeI32(struct.scoreType.getValue());
      }
      if (struct.isSetRowFilter()) {
        oprot.writeString(struct.rowFilter);
      }
      if (struct.isSetRecordFilter()) {
        oprot.writeString(struct.recordFilter);
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, SimpleQuery struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rowQuery = iprot.readBool();
        struct.setRowQueryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.scoreType = ScoreType.findByValue(iprot.readI32());
        struct.setScoreTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rowFilter = iprot.readString();
        struct.setRowFilterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recordFilter = iprot.readString();
        struct.setRecordFilterIsSet(true);
      }
    }
  }

}

