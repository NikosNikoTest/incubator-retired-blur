/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

/**
 * The Metric will hold all the information for a given Metric.
 */
public class Metric implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<Metric, Metric._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("Metric");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField NAME_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("name", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField STR_MAP_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("strMap", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)2);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField LONG_MAP_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("longMap", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)3);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField DOUBLE_MAP_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("doubleMap", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricTupleSchemeFactory());
  }

  /**
   * metric name.
   */
  public String name; // required
  /**
   * map of string values emitted by the Metric.
   */
  public Map<String,String> strMap; // required
  /**
   * map of long values emitted by the Metric.
   */
  public Map<String,Long> longMap; // required
  /**
   * map of double values emitted by the Metric.
   */
  public Map<String,Double> doubleMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    /**
     * metric name.
     */
    NAME((short)1, "name"),
    /**
     * map of string values emitted by the Metric.
     */
    STR_MAP((short)2, "strMap"),
    /**
     * map of long values emitted by the Metric.
     */
    LONG_MAP((short)3, "longMap"),
    /**
     * map of double values emitted by the Metric.
     */
    DOUBLE_MAP((short)4, "doubleMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // STR_MAP
          return STR_MAP;
        case 3: // LONG_MAP
          return LONG_MAP;
        case 4: // DOUBLE_MAP
          return DOUBLE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("name", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR_MAP, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("strMap", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
    tmpMap.put(_Fields.LONG_MAP, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("longMap", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_MAP, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("doubleMap", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.MapMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP, 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING), 
            new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(Metric.class, metaDataMap);
  }

  public Metric() {
  }

  public Metric(
    String name,
    Map<String,String> strMap,
    Map<String,Long> longMap,
    Map<String,Double> doubleMap)
  {
    this();
    this.name = name;
    this.strMap = strMap;
    this.longMap = longMap;
    this.doubleMap = doubleMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Metric(Metric other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetStrMap()) {
      Map<String,String> __this__strMap = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.strMap.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__strMap_copy_key = other_element_key;

        String __this__strMap_copy_value = other_element_value;

        __this__strMap.put(__this__strMap_copy_key, __this__strMap_copy_value);
      }
      this.strMap = __this__strMap;
    }
    if (other.isSetLongMap()) {
      Map<String,Long> __this__longMap = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.longMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__longMap_copy_key = other_element_key;

        Long __this__longMap_copy_value = other_element_value;

        __this__longMap.put(__this__longMap_copy_key, __this__longMap_copy_value);
      }
      this.longMap = __this__longMap;
    }
    if (other.isSetDoubleMap()) {
      Map<String,Double> __this__doubleMap = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.doubleMap.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__doubleMap_copy_key = other_element_key;

        Double __this__doubleMap_copy_value = other_element_value;

        __this__doubleMap.put(__this__doubleMap_copy_key, __this__doubleMap_copy_value);
      }
      this.doubleMap = __this__doubleMap;
    }
  }

  public Metric deepCopy() {
    return new Metric(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.strMap = null;
    this.longMap = null;
    this.doubleMap = null;
  }

  /**
   * metric name.
   */
  public String getName() {
    return this.name;
  }

  /**
   * metric name.
   */
  public Metric setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getStrMapSize() {
    return (this.strMap == null) ? 0 : this.strMap.size();
  }

  public void putToStrMap(String key, String val) {
    if (this.strMap == null) {
      this.strMap = new HashMap<String,String>();
    }
    this.strMap.put(key, val);
  }

  /**
   * map of string values emitted by the Metric.
   */
  public Map<String,String> getStrMap() {
    return this.strMap;
  }

  /**
   * map of string values emitted by the Metric.
   */
  public Metric setStrMap(Map<String,String> strMap) {
    this.strMap = strMap;
    return this;
  }

  public void unsetStrMap() {
    this.strMap = null;
  }

  /** Returns true if field strMap is set (has been assigned a value) and false otherwise */
  public boolean isSetStrMap() {
    return this.strMap != null;
  }

  public void setStrMapIsSet(boolean value) {
    if (!value) {
      this.strMap = null;
    }
  }

  public int getLongMapSize() {
    return (this.longMap == null) ? 0 : this.longMap.size();
  }

  public void putToLongMap(String key, long val) {
    if (this.longMap == null) {
      this.longMap = new HashMap<String,Long>();
    }
    this.longMap.put(key, val);
  }

  /**
   * map of long values emitted by the Metric.
   */
  public Map<String,Long> getLongMap() {
    return this.longMap;
  }

  /**
   * map of long values emitted by the Metric.
   */
  public Metric setLongMap(Map<String,Long> longMap) {
    this.longMap = longMap;
    return this;
  }

  public void unsetLongMap() {
    this.longMap = null;
  }

  /** Returns true if field longMap is set (has been assigned a value) and false otherwise */
  public boolean isSetLongMap() {
    return this.longMap != null;
  }

  public void setLongMapIsSet(boolean value) {
    if (!value) {
      this.longMap = null;
    }
  }

  public int getDoubleMapSize() {
    return (this.doubleMap == null) ? 0 : this.doubleMap.size();
  }

  public void putToDoubleMap(String key, double val) {
    if (this.doubleMap == null) {
      this.doubleMap = new HashMap<String,Double>();
    }
    this.doubleMap.put(key, val);
  }

  /**
   * map of double values emitted by the Metric.
   */
  public Map<String,Double> getDoubleMap() {
    return this.doubleMap;
  }

  /**
   * map of double values emitted by the Metric.
   */
  public Metric setDoubleMap(Map<String,Double> doubleMap) {
    this.doubleMap = doubleMap;
    return this;
  }

  public void unsetDoubleMap() {
    this.doubleMap = null;
  }

  /** Returns true if field doubleMap is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleMap() {
    return this.doubleMap != null;
  }

  public void setDoubleMapIsSet(boolean value) {
    if (!value) {
      this.doubleMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case STR_MAP:
      if (value == null) {
        unsetStrMap();
      } else {
        setStrMap((Map<String,String>)value);
      }
      break;

    case LONG_MAP:
      if (value == null) {
        unsetLongMap();
      } else {
        setLongMap((Map<String,Long>)value);
      }
      break;

    case DOUBLE_MAP:
      if (value == null) {
        unsetDoubleMap();
      } else {
        setDoubleMap((Map<String,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case STR_MAP:
      return getStrMap();

    case LONG_MAP:
      return getLongMap();

    case DOUBLE_MAP:
      return getDoubleMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case STR_MAP:
      return isSetStrMap();
    case LONG_MAP:
      return isSetLongMap();
    case DOUBLE_MAP:
      return isSetDoubleMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Metric)
      return this.equals((Metric)that);
    return false;
  }

  public boolean equals(Metric that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_strMap = true && this.isSetStrMap();
    boolean that_present_strMap = true && that.isSetStrMap();
    if (this_present_strMap || that_present_strMap) {
      if (!(this_present_strMap && that_present_strMap))
        return false;
      if (!this.strMap.equals(that.strMap))
        return false;
    }

    boolean this_present_longMap = true && this.isSetLongMap();
    boolean that_present_longMap = true && that.isSetLongMap();
    if (this_present_longMap || that_present_longMap) {
      if (!(this_present_longMap && that_present_longMap))
        return false;
      if (!this.longMap.equals(that.longMap))
        return false;
    }

    boolean this_present_doubleMap = true && this.isSetDoubleMap();
    boolean that_present_doubleMap = true && that.isSetDoubleMap();
    if (this_present_doubleMap || that_present_doubleMap) {
      if (!(this_present_doubleMap && that_present_doubleMap))
        return false;
      if (!this.doubleMap.equals(that.doubleMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Metric other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Metric typedOther = (Metric)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrMap()).compareTo(typedOther.isSetStrMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrMap()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.strMap, typedOther.strMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongMap()).compareTo(typedOther.isSetLongMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongMap()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.longMap, typedOther.longMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleMap()).compareTo(typedOther.isSetDoubleMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleMap()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.doubleMap, typedOther.doubleMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Metric(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("strMap:");
    if (this.strMap == null) {
      sb.append("null");
    } else {
      sb.append(this.strMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("longMap:");
    if (this.longMap == null) {
      sb.append("null");
    } else {
      sb.append(this.longMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleMap:");
    if (this.doubleMap == null) {
      sb.append("null");
    } else {
      sb.append(this.doubleMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricStandardSchemeFactory implements SchemeFactory {
    public MetricStandardScheme getScheme() {
      return new MetricStandardScheme();
    }
  }

  private static class MetricStandardScheme extends StandardScheme<Metric> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, Metric struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STR_MAP
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map192 = iprot.readMapBegin();
                struct.strMap = new HashMap<String,String>(2*_map192.size);
                for (int _i193 = 0; _i193 < _map192.size; ++_i193)
                {
                  String _key194; // optional
                  String _val195; // required
                  _key194 = iprot.readString();
                  _val195 = iprot.readString();
                  struct.strMap.put(_key194, _val195);
                }
                iprot.readMapEnd();
              }
              struct.setStrMapIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LONG_MAP
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map196 = iprot.readMapBegin();
                struct.longMap = new HashMap<String,Long>(2*_map196.size);
                for (int _i197 = 0; _i197 < _map196.size; ++_i197)
                {
                  String _key198; // optional
                  long _val199; // required
                  _key198 = iprot.readString();
                  _val199 = iprot.readI64();
                  struct.longMap.put(_key198, _val199);
                }
                iprot.readMapEnd();
              }
              struct.setLongMapIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOUBLE_MAP
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.MAP) {
              {
                org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map200 = iprot.readMapBegin();
                struct.doubleMap = new HashMap<String,Double>(2*_map200.size);
                for (int _i201 = 0; _i201 < _map200.size; ++_i201)
                {
                  String _key202; // optional
                  double _val203; // required
                  _key202 = iprot.readString();
                  _val203 = iprot.readDouble();
                  struct.doubleMap.put(_key202, _val203);
                }
                iprot.readMapEnd();
              }
              struct.setDoubleMapIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, Metric struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.strMap != null) {
        oprot.writeFieldBegin(STR_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.strMap.size()));
          for (Map.Entry<String, String> _iter204 : struct.strMap.entrySet())
          {
            oprot.writeString(_iter204.getKey());
            oprot.writeString(_iter204.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.longMap != null) {
        oprot.writeFieldBegin(LONG_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I64, struct.longMap.size()));
          for (Map.Entry<String, Long> _iter205 : struct.longMap.entrySet())
          {
            oprot.writeString(_iter205.getKey());
            oprot.writeI64(_iter205.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.doubleMap != null) {
        oprot.writeFieldBegin(DOUBLE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.DOUBLE, struct.doubleMap.size()));
          for (Map.Entry<String, Double> _iter206 : struct.doubleMap.entrySet())
          {
            oprot.writeString(_iter206.getKey());
            oprot.writeDouble(_iter206.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricTupleSchemeFactory implements SchemeFactory {
    public MetricTupleScheme getScheme() {
      return new MetricTupleScheme();
    }
  }

  private static class MetricTupleScheme extends TupleScheme<Metric> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, Metric struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetStrMap()) {
        optionals.set(1);
      }
      if (struct.isSetLongMap()) {
        optionals.set(2);
      }
      if (struct.isSetDoubleMap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetStrMap()) {
        {
          oprot.writeI32(struct.strMap.size());
          for (Map.Entry<String, String> _iter207 : struct.strMap.entrySet())
          {
            oprot.writeString(_iter207.getKey());
            oprot.writeString(_iter207.getValue());
          }
        }
      }
      if (struct.isSetLongMap()) {
        {
          oprot.writeI32(struct.longMap.size());
          for (Map.Entry<String, Long> _iter208 : struct.longMap.entrySet())
          {
            oprot.writeString(_iter208.getKey());
            oprot.writeI64(_iter208.getValue());
          }
        }
      }
      if (struct.isSetDoubleMap()) {
        {
          oprot.writeI32(struct.doubleMap.size());
          for (Map.Entry<String, Double> _iter209 : struct.doubleMap.entrySet())
          {
            oprot.writeString(_iter209.getKey());
            oprot.writeDouble(_iter209.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, Metric struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map210 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
          struct.strMap = new HashMap<String,String>(2*_map210.size);
          for (int _i211 = 0; _i211 < _map210.size; ++_i211)
          {
            String _key212; // optional
            String _val213; // required
            _key212 = iprot.readString();
            _val213 = iprot.readString();
            struct.strMap.put(_key212, _val213);
          }
        }
        struct.setStrMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map214 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I64, iprot.readI32());
          struct.longMap = new HashMap<String,Long>(2*_map214.size);
          for (int _i215 = 0; _i215 < _map214.size; ++_i215)
          {
            String _key216; // optional
            long _val217; // required
            _key216 = iprot.readString();
            _val217 = iprot.readI64();
            struct.longMap.put(_key216, _val217);
          }
        }
        struct.setLongMapIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap _map218 = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TMap(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRING, org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleMap = new HashMap<String,Double>(2*_map218.size);
          for (int _i219 = 0; _i219 < _map218.size; ++_i219)
          {
            String _key220; // optional
            double _val221; // required
            _key220 = iprot.readString();
            _val221 = iprot.readDouble();
            struct.doubleMap.put(_key220, _val221);
          }
        }
        struct.setDoubleMapIsSet(true);
      }
    }
  }

}

