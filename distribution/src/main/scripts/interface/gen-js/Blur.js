//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Blur_execute_args = function(args) {
  this.table = null;
  this.commandName = null;
  this.arguments = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.commandName !== undefined) {
      this.commandName = args.commandName;
    }
    if (args.arguments !== undefined) {
      this.arguments = args.arguments;
    }
  }
};
Blur_execute_args.prototype = {};
Blur_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.commandName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.arguments = new Arguments();
        this.arguments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_execute_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_execute_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.commandName !== null && this.commandName !== undefined) {
    output.writeFieldBegin('commandName', Thrift.Type.STRING, 2);
    output.writeString(this.commandName);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.STRUCT, 3);
    this.arguments.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_execute_result = function(args) {
  this.success = null;
  this.bex = null;
  this.tex = null;
  if (args instanceof BlurException) {
    this.bex = args;
    return;
  }
  if (args instanceof TimeoutException) {
    this.tex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.bex !== undefined) {
      this.bex = args.bex;
    }
    if (args.tex !== undefined) {
      this.tex = args.tex;
    }
  }
};
Blur_execute_result.prototype = {};
Blur_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bex = new BlurException();
        this.bex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tex = new TimeoutException();
        this.tex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_execute_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.bex !== null && this.bex !== undefined) {
    output.writeFieldBegin('bex', Thrift.Type.STRUCT, 1);
    this.bex.write(output);
    output.writeFieldEnd();
  }
  if (this.tex !== null && this.tex !== undefined) {
    output.writeFieldBegin('tex', Thrift.Type.STRUCT, 2);
    this.tex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_reconnect_args = function(args) {
  this.executionId = null;
  if (args) {
    if (args.executionId !== undefined) {
      this.executionId = args.executionId;
    }
  }
};
Blur_reconnect_args.prototype = {};
Blur_reconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_reconnect_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_reconnect_args');
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 1);
    output.writeString(this.executionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_reconnect_result = function(args) {
  this.success = null;
  this.bex = null;
  this.tex = null;
  if (args instanceof BlurException) {
    this.bex = args;
    return;
  }
  if (args instanceof TimeoutException) {
    this.tex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.bex !== undefined) {
      this.bex = args.bex;
    }
    if (args.tex !== undefined) {
      this.tex = args.tex;
    }
  }
};
Blur_reconnect_result.prototype = {};
Blur_reconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bex = new BlurException();
        this.bex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tex = new TimeoutException();
        this.tex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_reconnect_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_reconnect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.bex !== null && this.bex !== undefined) {
    output.writeFieldBegin('bex', Thrift.Type.STRUCT, 1);
    this.bex.write(output);
    output.writeFieldEnd();
  }
  if (this.tex !== null && this.tex !== undefined) {
    output.writeFieldBegin('tex', Thrift.Type.STRUCT, 2);
    this.tex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_refresh_args = function(args) {
};
Blur_refresh_args.prototype = {};
Blur_refresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_refresh_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_refresh_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_refresh_result = function(args) {
};
Blur_refresh_result.prototype = {};
Blur_refresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_refresh_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_refresh_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createTable_args = function(args) {
  this.tableDescriptor = null;
  if (args) {
    if (args.tableDescriptor !== undefined) {
      this.tableDescriptor = args.tableDescriptor;
    }
  }
};
Blur_createTable_args.prototype = {};
Blur_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableDescriptor = new TableDescriptor();
        this.tableDescriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_createTable_args');
  if (this.tableDescriptor !== null && this.tableDescriptor !== undefined) {
    output.writeFieldBegin('tableDescriptor', Thrift.Type.STRUCT, 1);
    this.tableDescriptor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_createTable_result.prototype = {};
Blur_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_createTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enableTable_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_enableTable_args.prototype = {};
Blur_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enableTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enableTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enableTable_result.prototype = {};
Blur_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enableTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_disableTable_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_disableTable_args.prototype = {};
Blur_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_disableTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_disableTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_disableTable_result.prototype = {};
Blur_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_disableTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeTable_args = function(args) {
  this.table = null;
  this.deleteIndexFiles = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.deleteIndexFiles !== undefined) {
      this.deleteIndexFiles = args.deleteIndexFiles;
    }
  }
};
Blur_removeTable_args.prototype = {};
Blur_removeTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteIndexFiles = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.deleteIndexFiles !== null && this.deleteIndexFiles !== undefined) {
    output.writeFieldBegin('deleteIndexFiles', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteIndexFiles);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_removeTable_result.prototype = {};
Blur_removeTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_addColumnDefinition_args = function(args) {
  this.table = null;
  this.columnDefinition = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnDefinition !== undefined) {
      this.columnDefinition = args.columnDefinition;
    }
  }
};
Blur_addColumnDefinition_args.prototype = {};
Blur_addColumnDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.columnDefinition = new ColumnDefinition();
        this.columnDefinition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_addColumnDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_addColumnDefinition_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnDefinition !== null && this.columnDefinition !== undefined) {
    output.writeFieldBegin('columnDefinition', Thrift.Type.STRUCT, 2);
    this.columnDefinition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_addColumnDefinition_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_addColumnDefinition_result.prototype = {};
Blur_addColumnDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_addColumnDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_addColumnDefinition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableList_args = function(args) {
};
Blur_tableList_args.prototype = {};
Blur_tableList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableList_result.prototype = {};
Blur_tableList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.success = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = input.readString().value;
          this.success.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter277 in this.success)
    {
      if (this.success.hasOwnProperty(iter277))
      {
        iter277 = this.success[iter277];
        output.writeString(iter277);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableListByCluster_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_tableListByCluster_args.prototype = {};
Blur_tableListByCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableListByCluster_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableListByCluster_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableListByCluster_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableListByCluster_result.prototype = {};
Blur_tableListByCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = input.readString().value;
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableListByCluster_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableListByCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        output.writeString(iter285);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_describe_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_describe_args.prototype = {};
Blur_describe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_describe_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_describe_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_describe_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_describe_result.prototype = {};
Blur_describe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableDescriptor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_describe_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_describe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_schema_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_schema_args.prototype = {};
Blur_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_schema_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_schema_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_schema_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_schema_result.prototype = {};
Blur_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_schema_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_parseQuery_args = function(args) {
  this.table = null;
  this.query = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
Blur_parseQuery_args.prototype = {};
Blur_parseQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_parseQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_parseQuery_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_parseQuery_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_parseQuery_result.prototype = {};
Blur_parseQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_parseQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_parseQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableStats_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_tableStats_args.prototype = {};
Blur_tableStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableStats_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableStats_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableStats_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableStats_result.prototype = {};
Blur_tableStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableStats_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_optimize_args = function(args) {
  this.table = null;
  this.numberOfSegmentsPerShard = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.numberOfSegmentsPerShard !== undefined) {
      this.numberOfSegmentsPerShard = args.numberOfSegmentsPerShard;
    }
  }
};
Blur_optimize_args.prototype = {};
Blur_optimize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numberOfSegmentsPerShard = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_optimize_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_optimize_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.numberOfSegmentsPerShard !== null && this.numberOfSegmentsPerShard !== undefined) {
    output.writeFieldBegin('numberOfSegmentsPerShard', Thrift.Type.I32, 2);
    output.writeI32(this.numberOfSegmentsPerShard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_optimize_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_optimize_result.prototype = {};
Blur_optimize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_optimize_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_optimize_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createSnapshot_args = function(args) {
  this.table = null;
  this.name = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Blur_createSnapshot_args.prototype = {};
Blur_createSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_createSnapshot_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createSnapshot_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_createSnapshot_result.prototype = {};
Blur_createSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_createSnapshot_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeSnapshot_args = function(args) {
  this.table = null;
  this.name = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Blur_removeSnapshot_args.prototype = {};
Blur_removeSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeSnapshot_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeSnapshot_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_removeSnapshot_result.prototype = {};
Blur_removeSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeSnapshot_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_listSnapshots_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_listSnapshots_args.prototype = {};
Blur_listSnapshots_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_listSnapshots_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_listSnapshots_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_listSnapshots_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_listSnapshots_result.prototype = {};
Blur_listSnapshots_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size286 = 0;
        var _rtmp3290;
        this.success = {};
        var _ktype287 = 0;
        var _vtype288 = 0;
        _rtmp3290 = input.readMapBegin();
        _ktype287 = _rtmp3290.ktype;
        _vtype288 = _rtmp3290.vtype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          if (_i291 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key292 = null;
          var val293 = null;
          key292 = input.readString().value;
          var _size294 = 0;
          var _rtmp3298;
          val293 = [];
          var _etype297 = 0;
          _rtmp3298 = input.readListBegin();
          _etype297 = _rtmp3298.etype;
          _size294 = _rtmp3298.size;
          for (var _i299 = 0; _i299 < _size294; ++_i299)
          {
            var elem300 = null;
            elem300 = input.readString().value;
            val293.push(elem300);
          }
          input.readListEnd();
          this.success[key292] = val293;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_listSnapshots_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_listSnapshots_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter301 in this.success)
    {
      if (this.success.hasOwnProperty(kiter301))
      {
        var viter302 = this.success[kiter301];
        output.writeString(kiter301);
        output.writeListBegin(Thrift.Type.STRING, viter302.length);
        for (var iter303 in viter302)
        {
          if (viter302.hasOwnProperty(iter303))
          {
            iter303 = viter302[iter303];
            output.writeString(iter303);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_setUser_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
Blur_setUser_args.prototype = {};
Blur_setUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_setUser_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_setUser_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_setUser_result = function(args) {
};
Blur_setUser_result.prototype = {};
Blur_setUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_setUser_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_setUser_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_query_args = function(args) {
  this.table = null;
  this.blurQuery = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.blurQuery !== undefined) {
      this.blurQuery = args.blurQuery;
    }
  }
};
Blur_query_args.prototype = {};
Blur_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blurQuery = new BlurQuery();
        this.blurQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_query_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_query_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.blurQuery !== null && this.blurQuery !== undefined) {
    output.writeFieldBegin('blurQuery', Thrift.Type.STRUCT, 2);
    this.blurQuery.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_query_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_query_result.prototype = {};
Blur_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BlurResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_query_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRow_args = function(args) {
  this.table = null;
  this.selector = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.selector !== undefined) {
      this.selector = args.selector;
    }
  }
};
Blur_fetchRow_args.prototype = {};
Blur_fetchRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRow_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRow_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 2);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRow_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_fetchRow_result.prototype = {};
Blur_fetchRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRow_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRowBatch_args = function(args) {
  this.table = null;
  this.selectors = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.selectors !== undefined) {
      this.selectors = args.selectors;
    }
  }
};
Blur_fetchRowBatch_args.prototype = {};
Blur_fetchRowBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.selectors = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = new Selector();
          elem310.read(input);
          this.selectors.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRowBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRowBatch_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.selectors !== null && this.selectors !== undefined) {
    output.writeFieldBegin('selectors', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.selectors.length);
    for (var iter311 in this.selectors)
    {
      if (this.selectors.hasOwnProperty(iter311))
      {
        iter311 = this.selectors[iter311];
        iter311.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRowBatch_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_fetchRowBatch_result.prototype = {};
Blur_fetchRowBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.success = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = new FetchResult();
          elem318.read(input);
          this.success.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRowBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRowBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter319 in this.success)
    {
      if (this.success.hasOwnProperty(iter319))
      {
        iter319 = this.success[iter319];
        iter319.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutate_args = function(args) {
  this.mutation = null;
  if (args) {
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
Blur_mutate_args.prototype = {};
Blur_mutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new RowMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutate_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutate_args');
  if (this.mutation !== null && this.mutation !== undefined) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 1);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutate_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_mutate_result.prototype = {};
Blur_mutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutate_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutate_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutate_args = function(args) {
  this.mutation = null;
  if (args) {
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
Blur_enqueueMutate_args.prototype = {};
Blur_enqueueMutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new RowMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutate_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutate_args');
  if (this.mutation !== null && this.mutation !== undefined) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 1);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutate_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enqueueMutate_result.prototype = {};
Blur_enqueueMutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutate_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutate_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutateBatch_args = function(args) {
  this.mutations = null;
  if (args) {
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
Blur_mutateBatch_args.prototype = {};
Blur_mutateBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.mutations = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = new RowMutation();
          elem326.read(input);
          this.mutations.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutateBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutateBatch_args');
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter327 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter327))
      {
        iter327 = this.mutations[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutateBatch_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_mutateBatch_result.prototype = {};
Blur_mutateBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutateBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutateBatch_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutateBatch_args = function(args) {
  this.mutations = null;
  if (args) {
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
Blur_enqueueMutateBatch_args.prototype = {};
Blur_enqueueMutateBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.mutations = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = new RowMutation();
          elem334.read(input);
          this.mutations.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutateBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutateBatch_args');
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter335 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter335))
      {
        iter335 = this.mutations[iter335];
        iter335.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutateBatch_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enqueueMutateBatch_result.prototype = {};
Blur_enqueueMutateBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutateBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutateBatch_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_cancelQuery_args = function(args) {
  this.table = null;
  this.uuid = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
Blur_cancelQuery_args.prototype = {};
Blur_cancelQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_cancelQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_cancelQuery_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_cancelQuery_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_cancelQuery_result.prototype = {};
Blur_cancelQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_cancelQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_cancelQuery_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusIdList_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_queryStatusIdList_args.prototype = {};
Blur_queryStatusIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusIdList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusIdList_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusIdList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_queryStatusIdList_result.prototype = {};
Blur_queryStatusIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size336 = 0;
        var _rtmp3340;
        this.success = [];
        var _etype339 = 0;
        _rtmp3340 = input.readListBegin();
        _etype339 = _rtmp3340.etype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          var elem342 = null;
          elem342 = input.readString().value;
          this.success.push(elem342);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusIdList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter343 in this.success)
    {
      if (this.success.hasOwnProperty(iter343))
      {
        iter343 = this.success[iter343];
        output.writeString(iter343);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusById_args = function(args) {
  this.table = null;
  this.uuid = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
Blur_queryStatusById_args.prototype = {};
Blur_queryStatusById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusById_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusById_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusById_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_queryStatusById_result.prototype = {};
Blur_queryStatusById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BlurQueryStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusById_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_terms_args = function(args) {
  this.table = null;
  this.columnFamily = null;
  this.columnName = null;
  this.startWith = null;
  this.size = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.startWith !== undefined) {
      this.startWith = args.startWith;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
Blur_terms_args.prototype = {};
Blur_terms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startWith = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.size = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_terms_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_terms_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnFamily !== null && this.columnFamily !== undefined) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 2);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 3);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.startWith !== null && this.startWith !== undefined) {
    output.writeFieldBegin('startWith', Thrift.Type.STRING, 4);
    output.writeString(this.startWith);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I16, 5);
    output.writeI16(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_terms_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_terms_result.prototype = {};
Blur_terms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size344 = 0;
        var _rtmp3348;
        this.success = [];
        var _etype347 = 0;
        _rtmp3348 = input.readListBegin();
        _etype347 = _rtmp3348.etype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var elem350 = null;
          elem350 = input.readString().value;
          this.success.push(elem350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_terms_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_terms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter351 in this.success)
    {
      if (this.success.hasOwnProperty(iter351))
      {
        iter351 = this.success[iter351];
        output.writeString(iter351);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_recordFrequency_args = function(args) {
  this.table = null;
  this.columnFamily = null;
  this.columnName = null;
  this.value = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Blur_recordFrequency_args.prototype = {};
Blur_recordFrequency_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_recordFrequency_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_recordFrequency_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnFamily !== null && this.columnFamily !== undefined) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 2);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 3);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_recordFrequency_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_recordFrequency_result.prototype = {};
Blur_recordFrequency_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_recordFrequency_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_recordFrequency_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardClusterList_args = function(args) {
};
Blur_shardClusterList_args.prototype = {};
Blur_shardClusterList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardClusterList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardClusterList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardClusterList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardClusterList_result.prototype = {};
Blur_shardClusterList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size352 = 0;
        var _rtmp3356;
        this.success = [];
        var _etype355 = 0;
        _rtmp3356 = input.readListBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = input.readString().value;
          this.success.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardClusterList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardClusterList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter359 in this.success)
    {
      if (this.success.hasOwnProperty(iter359))
      {
        iter359 = this.success[iter359];
        output.writeString(iter359);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerList_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_shardServerList_args.prototype = {};
Blur_shardServerList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerList_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerList_result.prototype = {};
Blur_shardServerList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size360 = 0;
        var _rtmp3364;
        this.success = [];
        var _etype363 = 0;
        _rtmp3364 = input.readListBegin();
        _etype363 = _rtmp3364.etype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var elem366 = null;
          elem366 = input.readString().value;
          this.success.push(elem366);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter367 in this.success)
    {
      if (this.success.hasOwnProperty(iter367))
      {
        iter367 = this.success[iter367];
        output.writeString(iter367);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_controllerServerList_args = function(args) {
};
Blur_controllerServerList_args.prototype = {};
Blur_controllerServerList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_controllerServerList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_controllerServerList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_controllerServerList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_controllerServerList_result.prototype = {};
Blur_controllerServerList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size368 = 0;
        var _rtmp3372;
        this.success = [];
        var _etype371 = 0;
        _rtmp3372 = input.readListBegin();
        _etype371 = _rtmp3372.etype;
        _size368 = _rtmp3372.size;
        for (var _i373 = 0; _i373 < _size368; ++_i373)
        {
          var elem374 = null;
          elem374 = input.readString().value;
          this.success.push(elem374);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_controllerServerList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_controllerServerList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter375 in this.success)
    {
      if (this.success.hasOwnProperty(iter375))
      {
        iter375 = this.success[iter375];
        output.writeString(iter375);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayout_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_shardServerLayout_args.prototype = {};
Blur_shardServerLayout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayout_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayout_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayout_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerLayout_result.prototype = {};
Blur_shardServerLayout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size376 = 0;
        var _rtmp3380;
        this.success = {};
        var _ktype377 = 0;
        var _vtype378 = 0;
        _rtmp3380 = input.readMapBegin();
        _ktype377 = _rtmp3380.ktype;
        _vtype378 = _rtmp3380.vtype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          if (_i381 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key382 = null;
          var val383 = null;
          key382 = input.readString().value;
          val383 = input.readString().value;
          this.success[key382] = val383;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayout_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter384 in this.success)
    {
      if (this.success.hasOwnProperty(kiter384))
      {
        var viter385 = this.success[kiter384];
        output.writeString(kiter384);
        output.writeString(viter385);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayoutState_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_shardServerLayoutState_args.prototype = {};
Blur_shardServerLayoutState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayoutState_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayoutState_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayoutState_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerLayoutState_result.prototype = {};
Blur_shardServerLayoutState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size386 = 0;
        var _rtmp3390;
        this.success = {};
        var _ktype387 = 0;
        var _vtype388 = 0;
        _rtmp3390 = input.readMapBegin();
        _ktype387 = _rtmp3390.ktype;
        _vtype388 = _rtmp3390.vtype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          if (_i391 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key392 = null;
          var val393 = null;
          key392 = input.readString().value;
          var _size394 = 0;
          var _rtmp3398;
          val393 = {};
          var _ktype395 = 0;
          var _vtype396 = 0;
          _rtmp3398 = input.readMapBegin();
          _ktype395 = _rtmp3398.ktype;
          _vtype396 = _rtmp3398.vtype;
          _size394 = _rtmp3398.size;
          for (var _i399 = 0; _i399 < _size394; ++_i399)
          {
            if (_i399 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key400 = null;
            var val401 = null;
            key400 = input.readString().value;
            val401 = input.readI32().value;
            val393[key400] = val401;
          }
          input.readMapEnd();
          this.success[key392] = val393;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayoutState_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayoutState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter402 in this.success)
    {
      if (this.success.hasOwnProperty(kiter402))
      {
        var viter403 = this.success[kiter402];
        output.writeString(kiter402);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(viter403));
        for (var kiter404 in viter403)
        {
          if (viter403.hasOwnProperty(kiter404))
          {
            var viter405 = viter403[kiter404];
            output.writeString(kiter404);
            output.writeI32(viter405);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_isInSafeMode_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_isInSafeMode_args.prototype = {};
Blur_isInSafeMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_isInSafeMode_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_isInSafeMode_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_isInSafeMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_isInSafeMode_result.prototype = {};
Blur_isInSafeMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_isInSafeMode_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_isInSafeMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configuration_args = function(args) {
};
Blur_configuration_args.prototype = {};
Blur_configuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configuration_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_configuration_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configuration_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_configuration_result.prototype = {};
Blur_configuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size406 = 0;
        var _rtmp3410;
        this.success = {};
        var _ktype407 = 0;
        var _vtype408 = 0;
        _rtmp3410 = input.readMapBegin();
        _ktype407 = _rtmp3410.ktype;
        _vtype408 = _rtmp3410.vtype;
        _size406 = _rtmp3410.size;
        for (var _i411 = 0; _i411 < _size406; ++_i411)
        {
          if (_i411 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key412 = null;
          var val413 = null;
          key412 = input.readString().value;
          val413 = input.readString().value;
          this.success[key412] = val413;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configuration_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_configuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter414 in this.success)
    {
      if (this.success.hasOwnProperty(kiter414))
      {
        var viter415 = this.success[kiter414];
        output.writeString(kiter414);
        output.writeString(viter415);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_metrics_args = function(args) {
  this.metrics = null;
  if (args) {
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
  }
};
Blur_metrics_args.prototype = {};
Blur_metrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size416 = 0;
        var _rtmp3420;
        this.metrics = [];
        var _etype419 = 0;
        _rtmp3420 = input.readSetBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = input.readString().value;
          this.metrics.push(elem422);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_metrics_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_metrics_args');
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.metrics.length);
    for (var iter423 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter423))
      {
        iter423 = this.metrics[iter423];
        output.writeString(iter423);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_metrics_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_metrics_result.prototype = {};
Blur_metrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size424 = 0;
        var _rtmp3428;
        this.success = {};
        var _ktype425 = 0;
        var _vtype426 = 0;
        _rtmp3428 = input.readMapBegin();
        _ktype425 = _rtmp3428.ktype;
        _vtype426 = _rtmp3428.vtype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          if (_i429 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key430 = null;
          var val431 = null;
          key430 = input.readString().value;
          val431 = new Metric();
          val431.read(input);
          this.success[key430] = val431;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_metrics_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_metrics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter432 in this.success)
    {
      if (this.success.hasOwnProperty(kiter432))
      {
        var viter433 = this.success[kiter432];
        output.writeString(kiter432);
        viter433.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_startTrace_args = function(args) {
  this.traceId = null;
  this.requestId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
Blur_startTrace_args.prototype = {};
Blur_startTrace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_startTrace_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_startTrace_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 2);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_startTrace_result = function(args) {
};
Blur_startTrace_result.prototype = {};
Blur_startTrace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_startTrace_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_startTrace_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceList_args = function(args) {
};
Blur_traceList_args.prototype = {};
Blur_traceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceList_result.prototype = {};
Blur_traceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size434 = 0;
        var _rtmp3438;
        this.success = [];
        var _etype437 = 0;
        _rtmp3438 = input.readListBegin();
        _etype437 = _rtmp3438.etype;
        _size434 = _rtmp3438.size;
        for (var _i439 = 0; _i439 < _size434; ++_i439)
        {
          var elem440 = null;
          elem440 = input.readString().value;
          this.success.push(elem440);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter441 in this.success)
    {
      if (this.success.hasOwnProperty(iter441))
      {
        iter441 = this.success[iter441];
        output.writeString(iter441);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestList_args = function(args) {
  this.traceId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
  }
};
Blur_traceRequestList_args.prototype = {};
Blur_traceRequestList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestList_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceRequestList_result.prototype = {};
Blur_traceRequestList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size442 = 0;
        var _rtmp3446;
        this.success = [];
        var _etype445 = 0;
        _rtmp3446 = input.readListBegin();
        _etype445 = _rtmp3446.etype;
        _size442 = _rtmp3446.size;
        for (var _i447 = 0; _i447 < _size442; ++_i447)
        {
          var elem448 = null;
          elem448 = input.readString().value;
          this.success.push(elem448);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter449 in this.success)
    {
      if (this.success.hasOwnProperty(iter449))
      {
        iter449 = this.success[iter449];
        output.writeString(iter449);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestFetch_args = function(args) {
  this.traceId = null;
  this.requestId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
Blur_traceRequestFetch_args.prototype = {};
Blur_traceRequestFetch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestFetch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestFetch_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 2);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestFetch_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceRequestFetch_result.prototype = {};
Blur_traceRequestFetch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestFetch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestFetch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRemove_args = function(args) {
  this.traceId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
  }
};
Blur_traceRemove_args.prototype = {};
Blur_traceRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRemove_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRemove_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRemove_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceRemove_result.prototype = {};
Blur_traceRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRemove_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRemove_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_ping_args = function(args) {
};
Blur_ping_args.prototype = {};
Blur_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_ping_result = function(args) {
};
Blur_ping_result.prototype = {};
Blur_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_logging_args = function(args) {
  this.classNameOrLoggerName = null;
  this.level = null;
  if (args) {
    if (args.classNameOrLoggerName !== undefined) {
      this.classNameOrLoggerName = args.classNameOrLoggerName;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
  }
};
Blur_logging_args.prototype = {};
Blur_logging_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classNameOrLoggerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_logging_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_logging_args');
  if (this.classNameOrLoggerName !== null && this.classNameOrLoggerName !== undefined) {
    output.writeFieldBegin('classNameOrLoggerName', Thrift.Type.STRING, 1);
    output.writeString(this.classNameOrLoggerName);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_logging_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_logging_result.prototype = {};
Blur_logging_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_logging_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_logging_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_resetLogging_args = function(args) {
};
Blur_resetLogging_args.prototype = {};
Blur_resetLogging_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_resetLogging_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_resetLogging_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_resetLogging_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_resetLogging_result.prototype = {};
Blur_resetLogging_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_resetLogging_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_resetLogging_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BlurClient.prototype = {};
BlurClient.prototype.execute = function(table, commandName, arguments) {
  this.send_execute(table, commandName, arguments);
  return this.recv_execute();
};

BlurClient.prototype.send_execute = function(table, commandName, arguments) {
  this.output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_execute_args();
  args.table = table;
  args.commandName = commandName;
  args.arguments = arguments;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.bex) {
    throw result.bex;
  }
  if (null !== result.tex) {
    throw result.tex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute failed: unknown result';
};
BlurClient.prototype.reconnect = function(executionId) {
  this.send_reconnect(executionId);
  return this.recv_reconnect();
};

BlurClient.prototype.send_reconnect = function(executionId) {
  this.output.writeMessageBegin('reconnect', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_reconnect_args();
  args.executionId = executionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_reconnect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_reconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.bex) {
    throw result.bex;
  }
  if (null !== result.tex) {
    throw result.tex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reconnect failed: unknown result';
};
BlurClient.prototype.refresh = function() {
  this.send_refresh();
};

BlurClient.prototype.send_refresh = function() {
  this.output.writeMessageBegin('refresh', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_refresh_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
BlurClient.prototype.createTable = function(tableDescriptor) {
  this.send_createTable(tableDescriptor);
  this.recv_createTable();
};

BlurClient.prototype.send_createTable = function(tableDescriptor) {
  this.output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_createTable_args();
  args.tableDescriptor = tableDescriptor;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_createTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_createTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enableTable = function(table) {
  this.send_enableTable(table);
  this.recv_enableTable();
};

BlurClient.prototype.send_enableTable = function(table) {
  this.output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enableTable_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.disableTable = function(table) {
  this.send_disableTable(table);
  this.recv_disableTable();
};

BlurClient.prototype.send_disableTable = function(table) {
  this.output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_disableTable_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_disableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_disableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.removeTable = function(table, deleteIndexFiles) {
  this.send_removeTable(table, deleteIndexFiles);
  this.recv_removeTable();
};

BlurClient.prototype.send_removeTable = function(table, deleteIndexFiles) {
  this.output.writeMessageBegin('removeTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_removeTable_args();
  args.table = table;
  args.deleteIndexFiles = deleteIndexFiles;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_removeTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_removeTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.addColumnDefinition = function(table, columnDefinition) {
  this.send_addColumnDefinition(table, columnDefinition);
  return this.recv_addColumnDefinition();
};

BlurClient.prototype.send_addColumnDefinition = function(table, columnDefinition) {
  this.output.writeMessageBegin('addColumnDefinition', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_addColumnDefinition_args();
  args.table = table;
  args.columnDefinition = columnDefinition;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_addColumnDefinition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_addColumnDefinition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addColumnDefinition failed: unknown result';
};
BlurClient.prototype.tableList = function() {
  this.send_tableList();
  return this.recv_tableList();
};

BlurClient.prototype.send_tableList = function() {
  this.output.writeMessageBegin('tableList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableList failed: unknown result';
};
BlurClient.prototype.tableListByCluster = function(cluster) {
  this.send_tableListByCluster(cluster);
  return this.recv_tableListByCluster();
};

BlurClient.prototype.send_tableListByCluster = function(cluster) {
  this.output.writeMessageBegin('tableListByCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableListByCluster_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableListByCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableListByCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableListByCluster failed: unknown result';
};
BlurClient.prototype.describe = function(table) {
  this.send_describe(table);
  return this.recv_describe();
};

BlurClient.prototype.send_describe = function(table) {
  this.output.writeMessageBegin('describe', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_describe_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_describe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_describe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describe failed: unknown result';
};
BlurClient.prototype.schema = function(table) {
  this.send_schema(table);
  return this.recv_schema();
};

BlurClient.prototype.send_schema = function(table) {
  this.output.writeMessageBegin('schema', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_schema_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_schema = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_schema_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'schema failed: unknown result';
};
BlurClient.prototype.parseQuery = function(table, query) {
  this.send_parseQuery(table, query);
  return this.recv_parseQuery();
};

BlurClient.prototype.send_parseQuery = function(table, query) {
  this.output.writeMessageBegin('parseQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_parseQuery_args();
  args.table = table;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_parseQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_parseQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'parseQuery failed: unknown result';
};
BlurClient.prototype.tableStats = function(table) {
  this.send_tableStats(table);
  return this.recv_tableStats();
};

BlurClient.prototype.send_tableStats = function(table) {
  this.output.writeMessageBegin('tableStats', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableStats_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableStats = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableStats_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableStats failed: unknown result';
};
BlurClient.prototype.optimize = function(table, numberOfSegmentsPerShard) {
  this.send_optimize(table, numberOfSegmentsPerShard);
  this.recv_optimize();
};

BlurClient.prototype.send_optimize = function(table, numberOfSegmentsPerShard) {
  this.output.writeMessageBegin('optimize', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_optimize_args();
  args.table = table;
  args.numberOfSegmentsPerShard = numberOfSegmentsPerShard;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_optimize = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_optimize_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.createSnapshot = function(table, name) {
  this.send_createSnapshot(table, name);
  this.recv_createSnapshot();
};

BlurClient.prototype.send_createSnapshot = function(table, name) {
  this.output.writeMessageBegin('createSnapshot', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_createSnapshot_args();
  args.table = table;
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_createSnapshot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_createSnapshot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.removeSnapshot = function(table, name) {
  this.send_removeSnapshot(table, name);
  this.recv_removeSnapshot();
};

BlurClient.prototype.send_removeSnapshot = function(table, name) {
  this.output.writeMessageBegin('removeSnapshot', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_removeSnapshot_args();
  args.table = table;
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_removeSnapshot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_removeSnapshot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.listSnapshots = function(table) {
  this.send_listSnapshots(table);
  return this.recv_listSnapshots();
};

BlurClient.prototype.send_listSnapshots = function(table) {
  this.output.writeMessageBegin('listSnapshots', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_listSnapshots_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_listSnapshots = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_listSnapshots_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listSnapshots failed: unknown result';
};
BlurClient.prototype.setUser = function(user) {
  this.send_setUser(user);
};

BlurClient.prototype.send_setUser = function(user) {
  this.output.writeMessageBegin('setUser', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_setUser_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
BlurClient.prototype.query = function(table, blurQuery) {
  this.send_query(table, blurQuery);
  return this.recv_query();
};

BlurClient.prototype.send_query = function(table, blurQuery) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_query_args();
  args.table = table;
  args.blurQuery = blurQuery;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
BlurClient.prototype.fetchRow = function(table, selector) {
  this.send_fetchRow(table, selector);
  return this.recv_fetchRow();
};

BlurClient.prototype.send_fetchRow = function(table, selector) {
  this.output.writeMessageBegin('fetchRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_fetchRow_args();
  args.table = table;
  args.selector = selector;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_fetchRow = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_fetchRow_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchRow failed: unknown result';
};
BlurClient.prototype.fetchRowBatch = function(table, selectors) {
  this.send_fetchRowBatch(table, selectors);
  return this.recv_fetchRowBatch();
};

BlurClient.prototype.send_fetchRowBatch = function(table, selectors) {
  this.output.writeMessageBegin('fetchRowBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_fetchRowBatch_args();
  args.table = table;
  args.selectors = selectors;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_fetchRowBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_fetchRowBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchRowBatch failed: unknown result';
};
BlurClient.prototype.mutate = function(mutation) {
  this.send_mutate(mutation);
  this.recv_mutate();
};

BlurClient.prototype.send_mutate = function(mutation) {
  this.output.writeMessageBegin('mutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_mutate_args();
  args.mutation = mutation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_mutate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_mutate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enqueueMutate = function(mutation) {
  this.send_enqueueMutate(mutation);
  this.recv_enqueueMutate();
};

BlurClient.prototype.send_enqueueMutate = function(mutation) {
  this.output.writeMessageBegin('enqueueMutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enqueueMutate_args();
  args.mutation = mutation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enqueueMutate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enqueueMutate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.mutateBatch = function(mutations) {
  this.send_mutateBatch(mutations);
  this.recv_mutateBatch();
};

BlurClient.prototype.send_mutateBatch = function(mutations) {
  this.output.writeMessageBegin('mutateBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_mutateBatch_args();
  args.mutations = mutations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_mutateBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_mutateBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enqueueMutateBatch = function(mutations) {
  this.send_enqueueMutateBatch(mutations);
  this.recv_enqueueMutateBatch();
};

BlurClient.prototype.send_enqueueMutateBatch = function(mutations) {
  this.output.writeMessageBegin('enqueueMutateBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enqueueMutateBatch_args();
  args.mutations = mutations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enqueueMutateBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enqueueMutateBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.cancelQuery = function(table, uuid) {
  this.send_cancelQuery(table, uuid);
  this.recv_cancelQuery();
};

BlurClient.prototype.send_cancelQuery = function(table, uuid) {
  this.output.writeMessageBegin('cancelQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_cancelQuery_args();
  args.table = table;
  args.uuid = uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_cancelQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_cancelQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.queryStatusIdList = function(table) {
  this.send_queryStatusIdList(table);
  return this.recv_queryStatusIdList();
};

BlurClient.prototype.send_queryStatusIdList = function(table) {
  this.output.writeMessageBegin('queryStatusIdList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_queryStatusIdList_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_queryStatusIdList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_queryStatusIdList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryStatusIdList failed: unknown result';
};
BlurClient.prototype.queryStatusById = function(table, uuid) {
  this.send_queryStatusById(table, uuid);
  return this.recv_queryStatusById();
};

BlurClient.prototype.send_queryStatusById = function(table, uuid) {
  this.output.writeMessageBegin('queryStatusById', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_queryStatusById_args();
  args.table = table;
  args.uuid = uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_queryStatusById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_queryStatusById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryStatusById failed: unknown result';
};
BlurClient.prototype.terms = function(table, columnFamily, columnName, startWith, size) {
  this.send_terms(table, columnFamily, columnName, startWith, size);
  return this.recv_terms();
};

BlurClient.prototype.send_terms = function(table, columnFamily, columnName, startWith, size) {
  this.output.writeMessageBegin('terms', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_terms_args();
  args.table = table;
  args.columnFamily = columnFamily;
  args.columnName = columnName;
  args.startWith = startWith;
  args.size = size;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_terms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_terms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terms failed: unknown result';
};
BlurClient.prototype.recordFrequency = function(table, columnFamily, columnName, value) {
  this.send_recordFrequency(table, columnFamily, columnName, value);
  return this.recv_recordFrequency();
};

BlurClient.prototype.send_recordFrequency = function(table, columnFamily, columnName, value) {
  this.output.writeMessageBegin('recordFrequency', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_recordFrequency_args();
  args.table = table;
  args.columnFamily = columnFamily;
  args.columnName = columnName;
  args.value = value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_recordFrequency = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_recordFrequency_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'recordFrequency failed: unknown result';
};
BlurClient.prototype.shardClusterList = function() {
  this.send_shardClusterList();
  return this.recv_shardClusterList();
};

BlurClient.prototype.send_shardClusterList = function() {
  this.output.writeMessageBegin('shardClusterList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardClusterList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardClusterList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardClusterList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardClusterList failed: unknown result';
};
BlurClient.prototype.shardServerList = function(cluster) {
  this.send_shardServerList(cluster);
  return this.recv_shardServerList();
};

BlurClient.prototype.send_shardServerList = function(cluster) {
  this.output.writeMessageBegin('shardServerList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerList_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerList failed: unknown result';
};
BlurClient.prototype.controllerServerList = function() {
  this.send_controllerServerList();
  return this.recv_controllerServerList();
};

BlurClient.prototype.send_controllerServerList = function() {
  this.output.writeMessageBegin('controllerServerList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_controllerServerList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_controllerServerList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_controllerServerList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'controllerServerList failed: unknown result';
};
BlurClient.prototype.shardServerLayout = function(table) {
  this.send_shardServerLayout(table);
  return this.recv_shardServerLayout();
};

BlurClient.prototype.send_shardServerLayout = function(table) {
  this.output.writeMessageBegin('shardServerLayout', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerLayout_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerLayout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerLayout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerLayout failed: unknown result';
};
BlurClient.prototype.shardServerLayoutState = function(table) {
  this.send_shardServerLayoutState(table);
  return this.recv_shardServerLayoutState();
};

BlurClient.prototype.send_shardServerLayoutState = function(table) {
  this.output.writeMessageBegin('shardServerLayoutState', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerLayoutState_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerLayoutState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerLayoutState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerLayoutState failed: unknown result';
};
BlurClient.prototype.isInSafeMode = function(cluster) {
  this.send_isInSafeMode(cluster);
  return this.recv_isInSafeMode();
};

BlurClient.prototype.send_isInSafeMode = function(cluster) {
  this.output.writeMessageBegin('isInSafeMode', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_isInSafeMode_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_isInSafeMode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_isInSafeMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isInSafeMode failed: unknown result';
};
BlurClient.prototype.configuration = function() {
  this.send_configuration();
  return this.recv_configuration();
};

BlurClient.prototype.send_configuration = function() {
  this.output.writeMessageBegin('configuration', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_configuration_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_configuration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_configuration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'configuration failed: unknown result';
};
BlurClient.prototype.metrics = function(metrics) {
  this.send_metrics(metrics);
  return this.recv_metrics();
};

BlurClient.prototype.send_metrics = function(metrics) {
  this.output.writeMessageBegin('metrics', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_metrics_args();
  args.metrics = metrics;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_metrics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_metrics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'metrics failed: unknown result';
};
BlurClient.prototype.startTrace = function(traceId, requestId) {
  this.send_startTrace(traceId, requestId);
};

BlurClient.prototype.send_startTrace = function(traceId, requestId) {
  this.output.writeMessageBegin('startTrace', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_startTrace_args();
  args.traceId = traceId;
  args.requestId = requestId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
BlurClient.prototype.traceList = function() {
  this.send_traceList();
  return this.recv_traceList();
};

BlurClient.prototype.send_traceList = function() {
  this.output.writeMessageBegin('traceList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'traceList failed: unknown result';
};
BlurClient.prototype.traceRequestList = function(traceId) {
  this.send_traceRequestList(traceId);
  return this.recv_traceRequestList();
};

BlurClient.prototype.send_traceRequestList = function(traceId) {
  this.output.writeMessageBegin('traceRequestList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceRequestList_args();
  args.traceId = traceId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceRequestList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceRequestList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'traceRequestList failed: unknown result';
};
BlurClient.prototype.traceRequestFetch = function(traceId, requestId) {
  this.send_traceRequestFetch(traceId, requestId);
  return this.recv_traceRequestFetch();
};

BlurClient.prototype.send_traceRequestFetch = function(traceId, requestId) {
  this.output.writeMessageBegin('traceRequestFetch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceRequestFetch_args();
  args.traceId = traceId;
  args.requestId = requestId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceRequestFetch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceRequestFetch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'traceRequestFetch failed: unknown result';
};
BlurClient.prototype.traceRemove = function(traceId) {
  this.send_traceRemove(traceId);
  this.recv_traceRemove();
};

BlurClient.prototype.send_traceRemove = function(traceId) {
  this.output.writeMessageBegin('traceRemove', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceRemove_args();
  args.traceId = traceId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceRemove = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceRemove_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.ping = function() {
  this.send_ping();
  this.recv_ping();
};

BlurClient.prototype.send_ping = function() {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
BlurClient.prototype.logging = function(classNameOrLoggerName, level) {
  this.send_logging(classNameOrLoggerName, level);
  this.recv_logging();
};

BlurClient.prototype.send_logging = function(classNameOrLoggerName, level) {
  this.output.writeMessageBegin('logging', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_logging_args();
  args.classNameOrLoggerName = classNameOrLoggerName;
  args.level = level;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_logging = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_logging_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.resetLogging = function() {
  this.send_resetLogging();
  this.recv_resetLogging();
};

BlurClient.prototype.send_resetLogging = function() {
  this.output.writeMessageBegin('resetLogging', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_resetLogging_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_resetLogging = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_resetLogging_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
