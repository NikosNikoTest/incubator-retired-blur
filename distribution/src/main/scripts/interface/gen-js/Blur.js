//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Blur_shardClusterList_args = function(args) {
};
Blur_shardClusterList_args.prototype = {};
Blur_shardClusterList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardClusterList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardClusterList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardClusterList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardClusterList_result.prototype = {};
Blur_shardClusterList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.success = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = input.readString().value;
          this.success.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardClusterList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardClusterList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter223 in this.success)
    {
      if (this.success.hasOwnProperty(iter223))
      {
        iter223 = this.success[iter223];
        output.writeString(iter223);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerList_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_shardServerList_args.prototype = {};
Blur_shardServerList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerList_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerList_result.prototype = {};
Blur_shardServerList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.success = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString().value;
          this.success.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter231 in this.success)
    {
      if (this.success.hasOwnProperty(iter231))
      {
        iter231 = this.success[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_controllerServerList_args = function(args) {
};
Blur_controllerServerList_args.prototype = {};
Blur_controllerServerList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_controllerServerList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_controllerServerList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_controllerServerList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_controllerServerList_result.prototype = {};
Blur_controllerServerList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.success = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = input.readString().value;
          this.success.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_controllerServerList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_controllerServerList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter239 in this.success)
    {
      if (this.success.hasOwnProperty(iter239))
      {
        iter239 = this.success[iter239];
        output.writeString(iter239);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayout_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_shardServerLayout_args.prototype = {};
Blur_shardServerLayout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayout_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayout_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayout_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerLayout_result.prototype = {};
Blur_shardServerLayout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size240 = 0;
        var _rtmp3244;
        this.success = {};
        var _ktype241 = 0;
        var _vtype242 = 0;
        _rtmp3244 = input.readMapBegin();
        _ktype241 = _rtmp3244.ktype;
        _vtype242 = _rtmp3244.vtype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          if (_i245 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key246 = null;
          var val247 = null;
          key246 = input.readString().value;
          val247 = input.readString().value;
          this.success[key246] = val247;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayout_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter248 in this.success)
    {
      if (this.success.hasOwnProperty(kiter248))
      {
        var viter249 = this.success[kiter248];
        output.writeString(kiter248);
        output.writeString(viter249);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayoutState_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_shardServerLayoutState_args.prototype = {};
Blur_shardServerLayoutState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayoutState_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayoutState_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayoutState_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerLayoutState_result.prototype = {};
Blur_shardServerLayoutState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.success = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          if (_i255 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key256 = null;
          var val257 = null;
          key256 = input.readString().value;
          var _size258 = 0;
          var _rtmp3262;
          val257 = {};
          var _ktype259 = 0;
          var _vtype260 = 0;
          _rtmp3262 = input.readMapBegin();
          _ktype259 = _rtmp3262.ktype;
          _vtype260 = _rtmp3262.vtype;
          _size258 = _rtmp3262.size;
          for (var _i263 = 0; _i263 < _size258; ++_i263)
          {
            if (_i263 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key264 = null;
            var val265 = null;
            key264 = input.readString().value;
            val265 = input.readI32().value;
            val257[key264] = val265;
          }
          input.readMapEnd();
          this.success[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayoutState_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayoutState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter266 in this.success)
    {
      if (this.success.hasOwnProperty(kiter266))
      {
        var viter267 = this.success[kiter266];
        output.writeString(kiter266);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(viter267));
        for (var kiter268 in viter267)
        {
          if (viter267.hasOwnProperty(kiter268))
          {
            var viter269 = viter267[kiter268];
            output.writeString(kiter268);
            output.writeI32(viter269);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableList_args = function(args) {
};
Blur_tableList_args.prototype = {};
Blur_tableList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableList_result.prototype = {};
Blur_tableList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.success = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = input.readString().value;
          this.success.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter277 in this.success)
    {
      if (this.success.hasOwnProperty(iter277))
      {
        iter277 = this.success[iter277];
        output.writeString(iter277);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableListByCluster_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_tableListByCluster_args.prototype = {};
Blur_tableListByCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableListByCluster_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableListByCluster_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableListByCluster_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableListByCluster_result.prototype = {};
Blur_tableListByCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = input.readString().value;
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableListByCluster_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableListByCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        output.writeString(iter285);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_describe_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_describe_args.prototype = {};
Blur_describe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_describe_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_describe_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_describe_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_describe_result.prototype = {};
Blur_describe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableDescriptor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_describe_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_describe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_query_args = function(args) {
  this.table = null;
  this.blurQuery = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.blurQuery !== undefined) {
      this.blurQuery = args.blurQuery;
    }
  }
};
Blur_query_args.prototype = {};
Blur_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blurQuery = new BlurQuery();
        this.blurQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_query_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_query_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.blurQuery !== null && this.blurQuery !== undefined) {
    output.writeFieldBegin('blurQuery', Thrift.Type.STRUCT, 2);
    this.blurQuery.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_query_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_query_result.prototype = {};
Blur_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BlurResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_query_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_parseQuery_args = function(args) {
  this.table = null;
  this.simpleQuery = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.simpleQuery !== undefined) {
      this.simpleQuery = args.simpleQuery;
    }
  }
};
Blur_parseQuery_args.prototype = {};
Blur_parseQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.simpleQuery = new SimpleQuery();
        this.simpleQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_parseQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_parseQuery_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.simpleQuery !== null && this.simpleQuery !== undefined) {
    output.writeFieldBegin('simpleQuery', Thrift.Type.STRUCT, 2);
    this.simpleQuery.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_parseQuery_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_parseQuery_result.prototype = {};
Blur_parseQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_parseQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_parseQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_cancelQuery_args = function(args) {
  this.table = null;
  this.uuid = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
Blur_cancelQuery_args.prototype = {};
Blur_cancelQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.uuid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_cancelQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_cancelQuery_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.I64, 2);
    output.writeI64(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_cancelQuery_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_cancelQuery_result.prototype = {};
Blur_cancelQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_cancelQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_cancelQuery_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_currentQueries_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_currentQueries_args.prototype = {};
Blur_currentQueries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_currentQueries_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_currentQueries_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_currentQueries_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_currentQueries_result.prototype = {};
Blur_currentQueries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.success = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = new BlurQueryStatus();
          elem292.read(input);
          this.success.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_currentQueries_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_currentQueries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter293 in this.success)
    {
      if (this.success.hasOwnProperty(iter293))
      {
        iter293 = this.success[iter293];
        iter293.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusIdList_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_queryStatusIdList_args.prototype = {};
Blur_queryStatusIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusIdList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusIdList_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusIdList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_queryStatusIdList_result.prototype = {};
Blur_queryStatusIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size294 = 0;
        var _rtmp3298;
        this.success = [];
        var _etype297 = 0;
        _rtmp3298 = input.readListBegin();
        _etype297 = _rtmp3298.etype;
        _size294 = _rtmp3298.size;
        for (var _i299 = 0; _i299 < _size294; ++_i299)
        {
          var elem300 = null;
          elem300 = input.readI64().value;
          this.success.push(elem300);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusIdList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter301 in this.success)
    {
      if (this.success.hasOwnProperty(iter301))
      {
        iter301 = this.success[iter301];
        output.writeI64(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusById_args = function(args) {
  this.table = null;
  this.uuid = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
Blur_queryStatusById_args.prototype = {};
Blur_queryStatusById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.uuid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusById_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusById_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.I64, 2);
    output.writeI64(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusById_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_queryStatusById_result.prototype = {};
Blur_queryStatusById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BlurQueryStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusById_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_schema_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_schema_args.prototype = {};
Blur_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_schema_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_schema_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_schema_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_schema_result.prototype = {};
Blur_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_schema_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_getTableStats_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_getTableStats_args.prototype = {};
Blur_getTableStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_getTableStats_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_getTableStats_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_getTableStats_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_getTableStats_result.prototype = {};
Blur_getTableStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_getTableStats_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_getTableStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableStats_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_tableStats_args.prototype = {};
Blur_tableStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableStats_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableStats_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableStats_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableStats_result.prototype = {};
Blur_tableStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableStats_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_terms_args = function(args) {
  this.table = null;
  this.columnFamily = null;
  this.columnName = null;
  this.startWith = null;
  this.size = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.startWith !== undefined) {
      this.startWith = args.startWith;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
Blur_terms_args.prototype = {};
Blur_terms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startWith = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.size = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_terms_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_terms_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnFamily !== null && this.columnFamily !== undefined) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 2);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 3);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.startWith !== null && this.startWith !== undefined) {
    output.writeFieldBegin('startWith', Thrift.Type.STRING, 4);
    output.writeString(this.startWith);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I16, 5);
    output.writeI16(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_terms_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_terms_result.prototype = {};
Blur_terms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size302 = 0;
        var _rtmp3306;
        this.success = [];
        var _etype305 = 0;
        _rtmp3306 = input.readListBegin();
        _etype305 = _rtmp3306.etype;
        _size302 = _rtmp3306.size;
        for (var _i307 = 0; _i307 < _size302; ++_i307)
        {
          var elem308 = null;
          elem308 = input.readString().value;
          this.success.push(elem308);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_terms_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_terms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter309 in this.success)
    {
      if (this.success.hasOwnProperty(iter309))
      {
        iter309 = this.success[iter309];
        output.writeString(iter309);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_recordFrequency_args = function(args) {
  this.table = null;
  this.columnFamily = null;
  this.columnName = null;
  this.value = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Blur_recordFrequency_args.prototype = {};
Blur_recordFrequency_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_recordFrequency_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_recordFrequency_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnFamily !== null && this.columnFamily !== undefined) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 2);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 3);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_recordFrequency_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_recordFrequency_result.prototype = {};
Blur_recordFrequency_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_recordFrequency_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_recordFrequency_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRow_args = function(args) {
  this.table = null;
  this.selector = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.selector !== undefined) {
      this.selector = args.selector;
    }
  }
};
Blur_fetchRow_args.prototype = {};
Blur_fetchRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRow_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRow_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 2);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRow_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_fetchRow_result.prototype = {};
Blur_fetchRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRow_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutate_args = function(args) {
  this.mutation = null;
  if (args) {
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
Blur_mutate_args.prototype = {};
Blur_mutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new RowMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutate_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutate_args');
  if (this.mutation !== null && this.mutation !== undefined) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 1);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutate_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_mutate_result.prototype = {};
Blur_mutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutate_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutate_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutateBatch_args = function(args) {
  this.mutations = null;
  if (args) {
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
Blur_mutateBatch_args.prototype = {};
Blur_mutateBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size310 = 0;
        var _rtmp3314;
        this.mutations = [];
        var _etype313 = 0;
        _rtmp3314 = input.readListBegin();
        _etype313 = _rtmp3314.etype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var elem316 = null;
          elem316 = new RowMutation();
          elem316.read(input);
          this.mutations.push(elem316);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutateBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutateBatch_args');
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter317 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter317))
      {
        iter317 = this.mutations[iter317];
        iter317.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutateBatch_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_mutateBatch_result.prototype = {};
Blur_mutateBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutateBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutateBatch_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createTable_args = function(args) {
  this.tableDescriptor = null;
  if (args) {
    if (args.tableDescriptor !== undefined) {
      this.tableDescriptor = args.tableDescriptor;
    }
  }
};
Blur_createTable_args.prototype = {};
Blur_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableDescriptor = new TableDescriptor();
        this.tableDescriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_createTable_args');
  if (this.tableDescriptor !== null && this.tableDescriptor !== undefined) {
    output.writeFieldBegin('tableDescriptor', Thrift.Type.STRUCT, 1);
    this.tableDescriptor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_createTable_result.prototype = {};
Blur_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_createTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enableTable_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_enableTable_args.prototype = {};
Blur_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enableTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enableTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enableTable_result.prototype = {};
Blur_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enableTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_disableTable_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_disableTable_args.prototype = {};
Blur_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_disableTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_disableTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_disableTable_result.prototype = {};
Blur_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_disableTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeTable_args = function(args) {
  this.table = null;
  this.deleteIndexFiles = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.deleteIndexFiles !== undefined) {
      this.deleteIndexFiles = args.deleteIndexFiles;
    }
  }
};
Blur_removeTable_args.prototype = {};
Blur_removeTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteIndexFiles = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.deleteIndexFiles !== null && this.deleteIndexFiles !== undefined) {
    output.writeFieldBegin('deleteIndexFiles', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteIndexFiles);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_removeTable_result.prototype = {};
Blur_removeTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_optimize_args = function(args) {
  this.table = null;
  this.numberOfSegmentsPerShard = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.numberOfSegmentsPerShard !== undefined) {
      this.numberOfSegmentsPerShard = args.numberOfSegmentsPerShard;
    }
  }
};
Blur_optimize_args.prototype = {};
Blur_optimize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numberOfSegmentsPerShard = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_optimize_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_optimize_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.numberOfSegmentsPerShard !== null && this.numberOfSegmentsPerShard !== undefined) {
    output.writeFieldBegin('numberOfSegmentsPerShard', Thrift.Type.I32, 2);
    output.writeI32(this.numberOfSegmentsPerShard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_optimize_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_optimize_result.prototype = {};
Blur_optimize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_optimize_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_optimize_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_isInSafeMode_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_isInSafeMode_args.prototype = {};
Blur_isInSafeMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_isInSafeMode_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_isInSafeMode_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_isInSafeMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_isInSafeMode_result.prototype = {};
Blur_isInSafeMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_isInSafeMode_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_isInSafeMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configuration_args = function(args) {
};
Blur_configuration_args.prototype = {};
Blur_configuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configuration_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_configuration_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configuration_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_configuration_result.prototype = {};
Blur_configuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size318 = 0;
        var _rtmp3322;
        this.success = {};
        var _ktype319 = 0;
        var _vtype320 = 0;
        _rtmp3322 = input.readMapBegin();
        _ktype319 = _rtmp3322.ktype;
        _vtype320 = _rtmp3322.vtype;
        _size318 = _rtmp3322.size;
        for (var _i323 = 0; _i323 < _size318; ++_i323)
        {
          if (_i323 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key324 = null;
          var val325 = null;
          key324 = input.readString().value;
          val325 = input.readString().value;
          this.success[key324] = val325;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configuration_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_configuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter326 in this.success)
    {
      if (this.success.hasOwnProperty(kiter326))
      {
        var viter327 = this.success[kiter326];
        output.writeString(kiter326);
        output.writeString(viter327);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_metrics_args = function(args) {
  this.metrics = null;
  if (args) {
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
  }
};
Blur_metrics_args.prototype = {};
Blur_metrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size328 = 0;
        var _rtmp3332;
        this.metrics = [];
        var _etype331 = 0;
        _rtmp3332 = input.readSetBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString().value;
          this.metrics.push(elem334);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_metrics_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_metrics_args');
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.metrics.length);
    for (var iter335 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter335))
      {
        iter335 = this.metrics[iter335];
        output.writeString(iter335);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_metrics_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_metrics_result.prototype = {};
Blur_metrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size336 = 0;
        var _rtmp3340;
        this.success = {};
        var _ktype337 = 0;
        var _vtype338 = 0;
        _rtmp3340 = input.readMapBegin();
        _ktype337 = _rtmp3340.ktype;
        _vtype338 = _rtmp3340.vtype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          if (_i341 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key342 = null;
          var val343 = null;
          key342 = input.readString().value;
          val343 = new Metric();
          val343.read(input);
          this.success[key342] = val343;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_metrics_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_metrics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter344 in this.success)
    {
      if (this.success.hasOwnProperty(kiter344))
      {
        var viter345 = this.success[kiter344];
        output.writeString(kiter344);
        viter345.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BlurClient.prototype = {};
BlurClient.prototype.shardClusterList = function() {
  this.send_shardClusterList();
  return this.recv_shardClusterList();
};

BlurClient.prototype.send_shardClusterList = function() {
  this.output.writeMessageBegin('shardClusterList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardClusterList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardClusterList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardClusterList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardClusterList failed: unknown result';
};
BlurClient.prototype.shardServerList = function(cluster) {
  this.send_shardServerList(cluster);
  return this.recv_shardServerList();
};

BlurClient.prototype.send_shardServerList = function(cluster) {
  this.output.writeMessageBegin('shardServerList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerList_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerList failed: unknown result';
};
BlurClient.prototype.controllerServerList = function() {
  this.send_controllerServerList();
  return this.recv_controllerServerList();
};

BlurClient.prototype.send_controllerServerList = function() {
  this.output.writeMessageBegin('controllerServerList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_controllerServerList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_controllerServerList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_controllerServerList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'controllerServerList failed: unknown result';
};
BlurClient.prototype.shardServerLayout = function(table) {
  this.send_shardServerLayout(table);
  return this.recv_shardServerLayout();
};

BlurClient.prototype.send_shardServerLayout = function(table) {
  this.output.writeMessageBegin('shardServerLayout', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerLayout_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerLayout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerLayout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerLayout failed: unknown result';
};
BlurClient.prototype.shardServerLayoutState = function(table) {
  this.send_shardServerLayoutState(table);
  return this.recv_shardServerLayoutState();
};

BlurClient.prototype.send_shardServerLayoutState = function(table) {
  this.output.writeMessageBegin('shardServerLayoutState', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerLayoutState_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerLayoutState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerLayoutState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerLayoutState failed: unknown result';
};
BlurClient.prototype.tableList = function() {
  this.send_tableList();
  return this.recv_tableList();
};

BlurClient.prototype.send_tableList = function() {
  this.output.writeMessageBegin('tableList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableList failed: unknown result';
};
BlurClient.prototype.tableListByCluster = function(cluster) {
  this.send_tableListByCluster(cluster);
  return this.recv_tableListByCluster();
};

BlurClient.prototype.send_tableListByCluster = function(cluster) {
  this.output.writeMessageBegin('tableListByCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableListByCluster_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableListByCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableListByCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableListByCluster failed: unknown result';
};
BlurClient.prototype.describe = function(table) {
  this.send_describe(table);
  return this.recv_describe();
};

BlurClient.prototype.send_describe = function(table) {
  this.output.writeMessageBegin('describe', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_describe_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_describe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_describe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describe failed: unknown result';
};
BlurClient.prototype.query = function(table, blurQuery) {
  this.send_query(table, blurQuery);
  return this.recv_query();
};

BlurClient.prototype.send_query = function(table, blurQuery) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_query_args();
  args.table = table;
  args.blurQuery = blurQuery;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
BlurClient.prototype.parseQuery = function(table, simpleQuery) {
  this.send_parseQuery(table, simpleQuery);
  return this.recv_parseQuery();
};

BlurClient.prototype.send_parseQuery = function(table, simpleQuery) {
  this.output.writeMessageBegin('parseQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_parseQuery_args();
  args.table = table;
  args.simpleQuery = simpleQuery;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_parseQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_parseQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'parseQuery failed: unknown result';
};
BlurClient.prototype.cancelQuery = function(table, uuid) {
  this.send_cancelQuery(table, uuid);
  this.recv_cancelQuery();
};

BlurClient.prototype.send_cancelQuery = function(table, uuid) {
  this.output.writeMessageBegin('cancelQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_cancelQuery_args();
  args.table = table;
  args.uuid = uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_cancelQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_cancelQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.currentQueries = function(table) {
  this.send_currentQueries(table);
  return this.recv_currentQueries();
};

BlurClient.prototype.send_currentQueries = function(table) {
  this.output.writeMessageBegin('currentQueries', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_currentQueries_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_currentQueries = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_currentQueries_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'currentQueries failed: unknown result';
};
BlurClient.prototype.queryStatusIdList = function(table) {
  this.send_queryStatusIdList(table);
  return this.recv_queryStatusIdList();
};

BlurClient.prototype.send_queryStatusIdList = function(table) {
  this.output.writeMessageBegin('queryStatusIdList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_queryStatusIdList_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_queryStatusIdList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_queryStatusIdList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryStatusIdList failed: unknown result';
};
BlurClient.prototype.queryStatusById = function(table, uuid) {
  this.send_queryStatusById(table, uuid);
  return this.recv_queryStatusById();
};

BlurClient.prototype.send_queryStatusById = function(table, uuid) {
  this.output.writeMessageBegin('queryStatusById', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_queryStatusById_args();
  args.table = table;
  args.uuid = uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_queryStatusById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_queryStatusById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryStatusById failed: unknown result';
};
BlurClient.prototype.schema = function(table) {
  this.send_schema(table);
  return this.recv_schema();
};

BlurClient.prototype.send_schema = function(table) {
  this.output.writeMessageBegin('schema', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_schema_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_schema = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_schema_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'schema failed: unknown result';
};
BlurClient.prototype.getTableStats = function(table) {
  this.send_getTableStats(table);
  return this.recv_getTableStats();
};

BlurClient.prototype.send_getTableStats = function(table) {
  this.output.writeMessageBegin('getTableStats', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_getTableStats_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_getTableStats = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_getTableStats_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTableStats failed: unknown result';
};
BlurClient.prototype.tableStats = function(table) {
  this.send_tableStats(table);
  return this.recv_tableStats();
};

BlurClient.prototype.send_tableStats = function(table) {
  this.output.writeMessageBegin('tableStats', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableStats_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableStats = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableStats_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableStats failed: unknown result';
};
BlurClient.prototype.terms = function(table, columnFamily, columnName, startWith, size) {
  this.send_terms(table, columnFamily, columnName, startWith, size);
  return this.recv_terms();
};

BlurClient.prototype.send_terms = function(table, columnFamily, columnName, startWith, size) {
  this.output.writeMessageBegin('terms', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_terms_args();
  args.table = table;
  args.columnFamily = columnFamily;
  args.columnName = columnName;
  args.startWith = startWith;
  args.size = size;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_terms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_terms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terms failed: unknown result';
};
BlurClient.prototype.recordFrequency = function(table, columnFamily, columnName, value) {
  this.send_recordFrequency(table, columnFamily, columnName, value);
  return this.recv_recordFrequency();
};

BlurClient.prototype.send_recordFrequency = function(table, columnFamily, columnName, value) {
  this.output.writeMessageBegin('recordFrequency', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_recordFrequency_args();
  args.table = table;
  args.columnFamily = columnFamily;
  args.columnName = columnName;
  args.value = value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_recordFrequency = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_recordFrequency_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'recordFrequency failed: unknown result';
};
BlurClient.prototype.fetchRow = function(table, selector) {
  this.send_fetchRow(table, selector);
  return this.recv_fetchRow();
};

BlurClient.prototype.send_fetchRow = function(table, selector) {
  this.output.writeMessageBegin('fetchRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_fetchRow_args();
  args.table = table;
  args.selector = selector;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_fetchRow = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_fetchRow_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchRow failed: unknown result';
};
BlurClient.prototype.mutate = function(mutation) {
  this.send_mutate(mutation);
  this.recv_mutate();
};

BlurClient.prototype.send_mutate = function(mutation) {
  this.output.writeMessageBegin('mutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_mutate_args();
  args.mutation = mutation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_mutate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_mutate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.mutateBatch = function(mutations) {
  this.send_mutateBatch(mutations);
  this.recv_mutateBatch();
};

BlurClient.prototype.send_mutateBatch = function(mutations) {
  this.output.writeMessageBegin('mutateBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_mutateBatch_args();
  args.mutations = mutations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_mutateBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_mutateBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.createTable = function(tableDescriptor) {
  this.send_createTable(tableDescriptor);
  this.recv_createTable();
};

BlurClient.prototype.send_createTable = function(tableDescriptor) {
  this.output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_createTable_args();
  args.tableDescriptor = tableDescriptor;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_createTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_createTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enableTable = function(table) {
  this.send_enableTable(table);
  this.recv_enableTable();
};

BlurClient.prototype.send_enableTable = function(table) {
  this.output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enableTable_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.disableTable = function(table) {
  this.send_disableTable(table);
  this.recv_disableTable();
};

BlurClient.prototype.send_disableTable = function(table) {
  this.output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_disableTable_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_disableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_disableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.removeTable = function(table, deleteIndexFiles) {
  this.send_removeTable(table, deleteIndexFiles);
  this.recv_removeTable();
};

BlurClient.prototype.send_removeTable = function(table, deleteIndexFiles) {
  this.output.writeMessageBegin('removeTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_removeTable_args();
  args.table = table;
  args.deleteIndexFiles = deleteIndexFiles;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_removeTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_removeTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.optimize = function(table, numberOfSegmentsPerShard) {
  this.send_optimize(table, numberOfSegmentsPerShard);
  this.recv_optimize();
};

BlurClient.prototype.send_optimize = function(table, numberOfSegmentsPerShard) {
  this.output.writeMessageBegin('optimize', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_optimize_args();
  args.table = table;
  args.numberOfSegmentsPerShard = numberOfSegmentsPerShard;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_optimize = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_optimize_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.isInSafeMode = function(cluster) {
  this.send_isInSafeMode(cluster);
  return this.recv_isInSafeMode();
};

BlurClient.prototype.send_isInSafeMode = function(cluster) {
  this.output.writeMessageBegin('isInSafeMode', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_isInSafeMode_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_isInSafeMode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_isInSafeMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isInSafeMode failed: unknown result';
};
BlurClient.prototype.configuration = function() {
  this.send_configuration();
  return this.recv_configuration();
};

BlurClient.prototype.send_configuration = function() {
  this.output.writeMessageBegin('configuration', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_configuration_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_configuration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_configuration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'configuration failed: unknown result';
};
BlurClient.prototype.metrics = function(metrics) {
  this.send_metrics(metrics);
  return this.recv_metrics();
};

BlurClient.prototype.send_metrics = function(metrics) {
  this.output.writeMessageBegin('metrics', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_metrics_args();
  args.metrics = metrics;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_metrics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_metrics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'metrics failed: unknown result';
};
