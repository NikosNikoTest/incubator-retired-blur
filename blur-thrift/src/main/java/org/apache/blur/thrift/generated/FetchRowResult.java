/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.blur.thrift.generated;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



import org.apache.blur.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.blur.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.blur.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.blur.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.blur.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

/**
 * FetchRowResult contains row result from a fetch.
 */
public class FetchRowResult implements org.apache.blur.thirdparty.thrift_0_9_0.TBase<FetchRowResult, FetchRowResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TStruct("FetchRowResult");

  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField ROW_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("row", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField START_RECORD_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("startRecord", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)2);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField MAX_RECORDS_TO_FETCH_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("maxRecordsToFetch", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)3);
  private static final org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField MORE_RECORDS_TO_FETCH_FIELD_DESC = new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField("moreRecordsToFetch", org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FetchRowResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FetchRowResultTupleSchemeFactory());
  }

  /**
   * The row fetched.
   */
  public Row row; // required
  /**
   * See Selector startRecord.
   */
  public int startRecord; // required
  /**
   * See Selector maxRecordsToFetch.
   */
  public int maxRecordsToFetch; // required
  /**
   * Are there more Records to fetch based on the Selector provided.
   */
  public boolean moreRecordsToFetch; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.blur.thirdparty.thrift_0_9_0.TFieldIdEnum {
    /**
     * The row fetched.
     */
    ROW((short)1, "row"),
    /**
     * See Selector startRecord.
     */
    START_RECORD((short)2, "startRecord"),
    /**
     * See Selector maxRecordsToFetch.
     */
    MAX_RECORDS_TO_FETCH((short)3, "maxRecordsToFetch"),
    /**
     * Are there more Records to fetch based on the Selector provided.
     */
    MORE_RECORDS_TO_FETCH((short)4, "moreRecordsToFetch");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROW
          return ROW;
        case 2: // START_RECORD
          return START_RECORD;
        case 3: // MAX_RECORDS_TO_FETCH
          return MAX_RECORDS_TO_FETCH;
        case 4: // MORE_RECORDS_TO_FETCH
          return MORE_RECORDS_TO_FETCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTRECORD_ISSET_ID = 0;
  private static final int __MAXRECORDSTOFETCH_ISSET_ID = 1;
  private static final int __MORERECORDSTOFETCH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROW, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("row", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Row.class)));
    tmpMap.put(_Fields.START_RECORD, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("startRecord", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_RECORDS_TO_FETCH, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("maxRecordsToFetch", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32)));
    tmpMap.put(_Fields.MORE_RECORDS_TO_FETCH, new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("moreRecordsToFetch", org.apache.blur.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
        new org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.blur.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(FetchRowResult.class, metaDataMap);
  }

  public FetchRowResult() {
    this.startRecord = -1;

    this.maxRecordsToFetch = -1;

    this.moreRecordsToFetch = false;

  }

  public FetchRowResult(
    Row row,
    int startRecord,
    int maxRecordsToFetch,
    boolean moreRecordsToFetch)
  {
    this();
    this.row = row;
    this.startRecord = startRecord;
    setStartRecordIsSet(true);
    this.maxRecordsToFetch = maxRecordsToFetch;
    setMaxRecordsToFetchIsSet(true);
    this.moreRecordsToFetch = moreRecordsToFetch;
    setMoreRecordsToFetchIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchRowResult(FetchRowResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRow()) {
      this.row = new Row(other.row);
    }
    this.startRecord = other.startRecord;
    this.maxRecordsToFetch = other.maxRecordsToFetch;
    this.moreRecordsToFetch = other.moreRecordsToFetch;
  }

  public FetchRowResult deepCopy() {
    return new FetchRowResult(this);
  }

  @Override
  public void clear() {
    this.row = null;
    this.startRecord = -1;

    this.maxRecordsToFetch = -1;

    this.moreRecordsToFetch = false;

  }

  /**
   * The row fetched.
   */
  public Row getRow() {
    return this.row;
  }

  /**
   * The row fetched.
   */
  public FetchRowResult setRow(Row row) {
    this.row = row;
    return this;
  }

  public void unsetRow() {
    this.row = null;
  }

  /** Returns true if field row is set (has been assigned a value) and false otherwise */
  public boolean isSetRow() {
    return this.row != null;
  }

  public void setRowIsSet(boolean value) {
    if (!value) {
      this.row = null;
    }
  }

  /**
   * See Selector startRecord.
   */
  public int getStartRecord() {
    return this.startRecord;
  }

  /**
   * See Selector startRecord.
   */
  public FetchRowResult setStartRecord(int startRecord) {
    this.startRecord = startRecord;
    setStartRecordIsSet(true);
    return this;
  }

  public void unsetStartRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTRECORD_ISSET_ID);
  }

  /** Returns true if field startRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetStartRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTRECORD_ISSET_ID);
  }

  public void setStartRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTRECORD_ISSET_ID, value);
  }

  /**
   * See Selector maxRecordsToFetch.
   */
  public int getMaxRecordsToFetch() {
    return this.maxRecordsToFetch;
  }

  /**
   * See Selector maxRecordsToFetch.
   */
  public FetchRowResult setMaxRecordsToFetch(int maxRecordsToFetch) {
    this.maxRecordsToFetch = maxRecordsToFetch;
    setMaxRecordsToFetchIsSet(true);
    return this;
  }

  public void unsetMaxRecordsToFetch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRECORDSTOFETCH_ISSET_ID);
  }

  /** Returns true if field maxRecordsToFetch is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRecordsToFetch() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRECORDSTOFETCH_ISSET_ID);
  }

  public void setMaxRecordsToFetchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRECORDSTOFETCH_ISSET_ID, value);
  }

  /**
   * Are there more Records to fetch based on the Selector provided.
   */
  public boolean isMoreRecordsToFetch() {
    return this.moreRecordsToFetch;
  }

  /**
   * Are there more Records to fetch based on the Selector provided.
   */
  public FetchRowResult setMoreRecordsToFetch(boolean moreRecordsToFetch) {
    this.moreRecordsToFetch = moreRecordsToFetch;
    setMoreRecordsToFetchIsSet(true);
    return this;
  }

  public void unsetMoreRecordsToFetch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORERECORDSTOFETCH_ISSET_ID);
  }

  /** Returns true if field moreRecordsToFetch is set (has been assigned a value) and false otherwise */
  public boolean isSetMoreRecordsToFetch() {
    return EncodingUtils.testBit(__isset_bitfield, __MORERECORDSTOFETCH_ISSET_ID);
  }

  public void setMoreRecordsToFetchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORERECORDSTOFETCH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROW:
      if (value == null) {
        unsetRow();
      } else {
        setRow((Row)value);
      }
      break;

    case START_RECORD:
      if (value == null) {
        unsetStartRecord();
      } else {
        setStartRecord((Integer)value);
      }
      break;

    case MAX_RECORDS_TO_FETCH:
      if (value == null) {
        unsetMaxRecordsToFetch();
      } else {
        setMaxRecordsToFetch((Integer)value);
      }
      break;

    case MORE_RECORDS_TO_FETCH:
      if (value == null) {
        unsetMoreRecordsToFetch();
      } else {
        setMoreRecordsToFetch((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW:
      return getRow();

    case START_RECORD:
      return Integer.valueOf(getStartRecord());

    case MAX_RECORDS_TO_FETCH:
      return Integer.valueOf(getMaxRecordsToFetch());

    case MORE_RECORDS_TO_FETCH:
      return Boolean.valueOf(isMoreRecordsToFetch());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROW:
      return isSetRow();
    case START_RECORD:
      return isSetStartRecord();
    case MAX_RECORDS_TO_FETCH:
      return isSetMaxRecordsToFetch();
    case MORE_RECORDS_TO_FETCH:
      return isSetMoreRecordsToFetch();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchRowResult)
      return this.equals((FetchRowResult)that);
    return false;
  }

  public boolean equals(FetchRowResult that) {
    if (that == null)
      return false;

    boolean this_present_row = true && this.isSetRow();
    boolean that_present_row = true && that.isSetRow();
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (!this.row.equals(that.row))
        return false;
    }

    boolean this_present_startRecord = true;
    boolean that_present_startRecord = true;
    if (this_present_startRecord || that_present_startRecord) {
      if (!(this_present_startRecord && that_present_startRecord))
        return false;
      if (this.startRecord != that.startRecord)
        return false;
    }

    boolean this_present_maxRecordsToFetch = true;
    boolean that_present_maxRecordsToFetch = true;
    if (this_present_maxRecordsToFetch || that_present_maxRecordsToFetch) {
      if (!(this_present_maxRecordsToFetch && that_present_maxRecordsToFetch))
        return false;
      if (this.maxRecordsToFetch != that.maxRecordsToFetch)
        return false;
    }

    boolean this_present_moreRecordsToFetch = true;
    boolean that_present_moreRecordsToFetch = true;
    if (this_present_moreRecordsToFetch || that_present_moreRecordsToFetch) {
      if (!(this_present_moreRecordsToFetch && that_present_moreRecordsToFetch))
        return false;
      if (this.moreRecordsToFetch != that.moreRecordsToFetch)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FetchRowResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FetchRowResult typedOther = (FetchRowResult)other;

    lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.row, typedOther.row);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartRecord()).compareTo(typedOther.isSetStartRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartRecord()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.startRecord, typedOther.startRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxRecordsToFetch()).compareTo(typedOther.isSetMaxRecordsToFetch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRecordsToFetch()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.maxRecordsToFetch, typedOther.maxRecordsToFetch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoreRecordsToFetch()).compareTo(typedOther.isSetMoreRecordsToFetch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoreRecordsToFetch()) {
      lastComparison = org.apache.blur.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.moreRecordsToFetch, typedOther.moreRecordsToFetch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FetchRowResult(");
    boolean first = true;

    sb.append("row:");
    if (this.row == null) {
      sb.append("null");
    } else {
      sb.append(this.row);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startRecord:");
    sb.append(this.startRecord);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxRecordsToFetch:");
    sb.append(this.maxRecordsToFetch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moreRecordsToFetch:");
    sb.append(this.moreRecordsToFetch);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
    // check for required fields
    // check for sub-struct validity
    if (row != null) {
      row.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.blur.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.blur.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
    } catch (org.apache.blur.thirdparty.thrift_0_9_0.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchRowResultStandardSchemeFactory implements SchemeFactory {
    public FetchRowResultStandardScheme getScheme() {
      return new FetchRowResultStandardScheme();
    }
  }

  private static class FetchRowResultStandardScheme extends StandardScheme<FetchRowResult> {

    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, FetchRowResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      org.apache.blur.thirdparty.thrift_0_9_0.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROW
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
              struct.row = new Row();
              struct.row.read(iprot);
              struct.setRowIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_RECORD
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32) {
              struct.startRecord = iprot.readI32();
              struct.setStartRecordIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_RECORDS_TO_FETCH
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.I32) {
              struct.maxRecordsToFetch = iprot.readI32();
              struct.setMaxRecordsToFetchIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MORE_RECORDS_TO_FETCH
            if (schemeField.type == org.apache.blur.thirdparty.thrift_0_9_0.protocol.TType.BOOL) {
              struct.moreRecordsToFetch = iprot.readBool();
              struct.setMoreRecordsToFetchIsSet(true);
            } else { 
              org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, FetchRowResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.row != null) {
        oprot.writeFieldBegin(ROW_FIELD_DESC);
        struct.row.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_RECORD_FIELD_DESC);
      oprot.writeI32(struct.startRecord);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RECORDS_TO_FETCH_FIELD_DESC);
      oprot.writeI32(struct.maxRecordsToFetch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORE_RECORDS_TO_FETCH_FIELD_DESC);
      oprot.writeBool(struct.moreRecordsToFetch);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchRowResultTupleSchemeFactory implements SchemeFactory {
    public FetchRowResultTupleScheme getScheme() {
      return new FetchRowResultTupleScheme();
    }
  }

  private static class FetchRowResultTupleScheme extends TupleScheme<FetchRowResult> {

    @Override
    public void write(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, FetchRowResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRow()) {
        optionals.set(0);
      }
      if (struct.isSetStartRecord()) {
        optionals.set(1);
      }
      if (struct.isSetMaxRecordsToFetch()) {
        optionals.set(2);
      }
      if (struct.isSetMoreRecordsToFetch()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRow()) {
        struct.row.write(oprot);
      }
      if (struct.isSetStartRecord()) {
        oprot.writeI32(struct.startRecord);
      }
      if (struct.isSetMaxRecordsToFetch()) {
        oprot.writeI32(struct.maxRecordsToFetch);
      }
      if (struct.isSetMoreRecordsToFetch()) {
        oprot.writeBool(struct.moreRecordsToFetch);
      }
    }

    @Override
    public void read(org.apache.blur.thirdparty.thrift_0_9_0.protocol.TProtocol prot, FetchRowResult struct) throws org.apache.blur.thirdparty.thrift_0_9_0.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.row = new Row();
        struct.row.read(iprot);
        struct.setRowIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startRecord = iprot.readI32();
        struct.setStartRecordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxRecordsToFetch = iprot.readI32();
        struct.setMaxRecordsToFetchIsSet(true);
      }
      if (incoming.get(3)) {
        struct.moreRecordsToFetch = iprot.readBool();
        struct.setMoreRecordsToFetchIsSet(true);
      }
    }
  }

}

